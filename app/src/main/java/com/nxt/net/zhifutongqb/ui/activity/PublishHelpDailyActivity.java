package com.nxt.net.zhifutongqb.ui.activity;import android.annotation.SuppressLint;import android.content.Intent;import android.os.Handler;import android.os.Message;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.baidu.location.LocationClientOption.LocationMode;import com.bumptech.glide.util.LogTime;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.lzy.imagepicker.ImagePicker;import com.lzy.imagepicker.bean.ImageItem;import com.lzy.imagepicker.view.CropImageView;import com.lzy.okgo.OkGo;import com.lzy.okgo.model.HttpParams;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.app.API;import com.nxt.net.zhifutongqb.bean.RequestResponse;import com.nxt.net.zhifutongqb.callback.StringBallDialogCallback;import com.nxt.net.zhifutongqb.base.BaseTitleActivity;import com.nxt.net.zhifutongqb.ui.adapter.ImagePickerAdapter;import com.nxt.net.zhifutongqb.utils.GlideImageLoader;import com.nxt.net.zhifutongqb.utils.ZPreferenceUtils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import java.io.File;import java.util.ArrayList;import butterknife.BindView;import butterknife.OnClick;import okhttp3.Call;import static com.nxt.net.zhifutongqb.R2.id.add;import static com.nxt.net.zhifutongqb.R2.id.default_activity_button;import static com.nxt.net.zhifutongqb.R2.id.tv_cancel;import static com.nxt.net.zhifutongqb.R2.id.tv_location;/** * Created by Maven on 2017/3/7. * Email: cyjiang_11@163.com * Description:编辑帮扶日志 */public class PublishHelpDailyActivity extends BaseTitleActivity {    private static final String TAG = "PublishHelpDailyActivit";    @BindView(R.id.iv_back)    ImageView ivBack;    @BindView(R.id.btn_send)    Button btnSend;    @BindView(R.id.et_content)    EditText etContent;    @BindView(R.id.rv_add_image)    RecyclerView recyclerView;    @BindView(tv_location)    TextView tvLocation;    @BindView(tv_cancel)    TextView tvCancel;    @BindView(R.id.ll_location)    LinearLayout llLocation;    private static final int COMPLETED = 0;    //百度定位相关    public LocationClient mLocationClient = null;    public BDLocationListener myListener = new MyLocationListener();    private LocationMode tempMode = LocationMode.Hight_Accuracy;    private String tempcoor = "gcj02";    // 显示位置的TextView    private String mylocation = "";    private String longitude = "";    private String latitude = "";    private String str_addr;    private ImagePickerAdapter adapter;    private File[] imageFiles;    private ArrayList<ImageItem> selImageList;    public static final int IMAGE_ITEM_ADD = -1;    public static final int REQUEST_CODE_SELECT = 100;    public static final int REQUEST_CODE_PREVIEW = 101;    private int maxImgCount = 9;        //可选择的最大图片数    private String journal;    private HttpParams param;    private HttpParams param1;    @Override    protected void initView() {        initImagePicker();        journal = etContent.getText().toString().trim();        selImageList = new ArrayList<>();        adapter = new ImagePickerAdapter(this, selImageList, maxImgCount);        adapter.setOnItemClickListener(new ImagePickerAdapter.OnRecyclerViewItemClickListener() {            @Override            public void onItemClick(View view, int position) {                switch (position) {                    case IMAGE_ITEM_ADD:                        //打开选择,本次允许选择的数量                        ImagePicker.getInstance().setSelectLimit(maxImgCount - selImageList.size());                        Intent intent = new Intent(PublishHelpDailyActivity.this, ImageChooseActivity.class);                        startActivityForResult(intent, REQUEST_CODE_SELECT);                        break;                    default:                        //打开预览                        Intent intentPreview = new Intent(PublishHelpDailyActivity.this, ImagePreviewDelActivity.class);                        intentPreview.putExtra(ImagePicker.EXTRA_IMAGE_ITEMS, (ArrayList<ImageItem>) adapter.getImages());                        intentPreview.putExtra(ImagePicker.EXTRA_SELECTED_IMAGE_POSITION, position);                        startActivityForResult(intentPreview, REQUEST_CODE_PREVIEW);                        break;                }            }        });        recyclerView.setLayoutManager(new GridLayoutManager(this, 4));        recyclerView.setHasFixedSize(true);        recyclerView.setAdapter(adapter);    }    @Override    protected int getLayout() {        return R.layout.activity_publish_help_daily;    }    private void initImagePicker() {        ImagePicker imagePicker = ImagePicker.getInstance();        imagePicker.setImageLoader(new GlideImageLoader());  //设置图片加载器        imagePicker.setShowCamera(true);  //显示拍照按钮        imagePicker.setCrop(true);        //允许裁剪（单选才有效）        imagePicker.setSaveRectangle(true); //是否按矩形区域保存        imagePicker.setSelectLimit(maxImgCount);    //选中数量限制        imagePicker.setStyle(CropImageView.Style.RECTANGLE);  //裁剪框的形状        imagePicker.setFocusWidth(800);   //裁剪框的宽度。单位像素（圆形自动取宽高最小值）        imagePicker.setFocusHeight(800);  //裁剪框的高度。单位像素（圆形自动取宽高最小值）        imagePicker.setOutPutX(1000);//保存文件的宽度。单位像素        imagePicker.setOutPutY(1000);//保存文件的高度。单位像素    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {            //添加图片返回(多次添加存在问题)            if (data != null && requestCode == REQUEST_CODE_SELECT) {                ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);                selImageList.addAll(images);                adapter.setImages(selImageList);            }        } else if (resultCode == ImagePicker.RESULT_CODE_BACK) {            //预览图片返回            if (data != null && requestCode == REQUEST_CODE_PREVIEW) {                ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_IMAGE_ITEMS);                selImageList.clear();                selImageList.addAll(images);                adapter.setImages(selImageList);            }        }        int a = selImageList.size();        param = new HttpParams();        param1 = new HttpParams();        if (a != 0) {            imageFiles = new File[a];            for (int i = 0; i < selImageList.size(); i++) {                Log.e(TAG, "onActivityResult: param---------->" + i);                imageFiles[i] = new File(selImageList.get(i).path);                param.put("ImageUrl", imageFiles[i]);                param1.put("ImageUrl2", imageFiles[i]);            }            Log.e(TAG, "onActivityResult: param---------->" + param);            Log.e(TAG, "onActivityResult: param---------->" + param1);        } else {            param.put("ImageUrl", "");        }    }    @OnClick({R.id.iv_back, R.id.btn_send, R.id.ll_location})    public void onClick(View view) {        switch (view.getId()) {            case R.id.iv_back:                finish();                break;            case R.id.btn_send:                journal = etContent.getText().toString().trim();                if (TextUtils.isEmpty(journal)) {                    ZToastUtils.showShort(PublishHelpDailyActivity.this, "帮扶日志内容不能为空");                    return;                }                sendHelpDaily();                break;            case R.id.ll_location:                // 声明LocationClient类                mLocationClient = new LocationClient(this);                tvLocation.setText("正在获取位置...");                new WorkThread().start();                break;            default:                break;        }    }    @SuppressLint("HandlerLeak")    private Handler handler = new Handler() {        @Override        public void handleMessage(Message msg) {            if (msg.what == COMPLETED) {                String address = (String) msg.obj;                tvLocation.setText(address);                tvCancel.setVisibility(View.VISIBLE);            }        }    };    //工作线程    private class WorkThread extends Thread {        @Override        public void run() {            //......处理比较耗时的操作            mLocationClient.registerLocationListener(myListener); // 注册监听函数            InitLocation();            mLocationClient.start();            //处理完成后给handler发送消息        }    }    private void sendHelpDaily() {        journal = etContent.getText().toString().trim();        if (isnetconnected) {            OkGo.post(API.DAILY_ADD_OR_EDIT_URL)                    .tag(this)                    .params("key", API.API_KEY)                    .params("Account", ZPreferenceUtils.getPrefString(API.USERNAME, ""))                    .params("Address", mylocation)                    .params("Coordinate", longitude + "," + latitude)                    .params("journal", journal)                    .params("type", "0")                    .params(param)//                    .params("ImageUrl", imageFiles[0])                    .execute(new StringBallDialogCallback(this) {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: signIN result------------>" + s);                            RequestResponse dailyResponse = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                            }.getType());                            switch (dailyResponse.getCode()) {                                case "1":                                    ZToastUtils.showShort(PublishHelpDailyActivity.this, "新的帮扶日志已生成");                                    setResult(RESULT_OK);                                    finish();                                    break;                                case "0":                                    ZToastUtils.showShort(PublishHelpDailyActivity.this, "帮扶日志生成失败");                                    break;                                case "-1":                                    ZToastUtils.showShort(PublishHelpDailyActivity.this, "帮扶日志生成失败");                                    break;                                case "-2":                                    ZToastUtils.showShort(PublishHelpDailyActivity.this, "未获取到账户信息");                                    break;                                case "-3":                                    ZToastUtils.showShort(PublishHelpDailyActivity.this, "帮扶日志生成失败");                                    break;                                default:                                    break;                            }                            dismissDialog();                        }                    });        } else {            ZToastUtils.showShort(this, getString(R.string.net_error));        }    }    private class MyLocationListener implements BDLocationListener {        @Override        public void onReceiveLocation(final BDLocation location) {            str_addr = location.getAddrStr();            Log.e(TAG, "onReceiveLocation: address--------->" + str_addr);            if (!TextUtils.isEmpty(str_addr)) {                new Thread(new Runnable() {                    @Override                    public void run() {                        mLocationClient.stop();//                tvLocation.setText(str_addr);                        mylocation = str_addr;                        longitude = String.valueOf(location.getLongitude());                        latitude = String.valueOf(location.getLatitude());                        Message msg = new Message();                        msg.what = COMPLETED;                        msg.obj = str_addr;                        handler.sendMessage(msg);                        tvCancel.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                tvLocation.setText("所在位置");                                tvCancel.setVisibility(View.GONE);                                mylocation = "";                                longitude = "";                                latitude = "";                            }                        });                    }                }).start();            }        }        @Override        public void onConnectHotSpotMessage(String s, int i) {        }    }    //初始化百度定位    private void InitLocation() {        LocationClientOption option = new LocationClientOption();        option.setLocationMode(tempMode);//        option.setCoorType(tempcoor);//        int span = 1000;        //        option.setScanSpan(span);//        option.setIsNeedAddress(true);        mLocationClient.setLocOption(option);    }}