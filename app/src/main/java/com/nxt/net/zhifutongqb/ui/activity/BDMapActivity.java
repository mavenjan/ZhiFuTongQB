package com.nxt.net.zhifutongqb.ui.activity;import android.content.Context;import android.graphics.Color;import android.graphics.Point;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.baidu.mapapi.SDKInitializer;import com.baidu.mapapi.map.BaiduMap;import com.baidu.mapapi.map.BaiduMap.OnMapClickListener;import com.baidu.mapapi.map.BaiduMap.OnMarkerClickListener;import com.baidu.mapapi.map.BitmapDescriptor;import com.baidu.mapapi.map.BitmapDescriptorFactory;import com.baidu.mapapi.map.InfoWindow;import com.baidu.mapapi.map.MapPoi;import com.baidu.mapapi.map.MapStatusUpdate;import com.baidu.mapapi.map.MapStatusUpdateFactory;import com.baidu.mapapi.map.MapView;import com.baidu.mapapi.map.Marker;import com.baidu.mapapi.map.MarkerOptions;import com.baidu.mapapi.map.MyLocationConfiguration;import com.baidu.mapapi.map.MyLocationConfiguration.LocationMode;import com.baidu.mapapi.map.MyLocationData;import com.baidu.mapapi.map.OverlayOptions;import com.baidu.mapapi.model.LatLng;import com.baidu.navisdk.adapter.BNRoutePlanNode;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.lzy.okgo.OkGo;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.app.API;import com.nxt.net.zhifutongqb.base.BaseBNTitleActivity;import com.nxt.net.zhifutongqb.bean.ParameterBean;import com.nxt.net.zhifutongqb.bean.CountryBean;import com.nxt.net.zhifutongqb.callback.StringDialogCallback;import com.nxt.net.zhifutongqb.server.MyOrientationListener;import com.nxt.net.zhifutongqb.server.MyOrientationListener.OnOrientationListener;import com.nxt.net.zhifutongqb.utils.CommonUtils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import java.text.DecimalFormat;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.Unbinder;import okhttp3.Call;import okhttp3.Response;/** * Created by Jan Maven on 2017/6/12. * Email:cyjiang_11@163.com * Description: */public class BDMapActivity extends BaseBNTitleActivity {    private static final String TAG = "BDMapActivity";    protected Unbinder unbinder;    @BindView(R.id.toolbar)    Toolbar mToolbar;    private MapView mMapView;    private BaiduMap mBaiduMap;    private Context context;    private ParameterBean parameterBean;    private String parameter;    // 定位相关    private LocationClient mLocationClient;    private MyLocationListener mLocationListener;    private boolean isFirstIn = true;    private double mLatitude;    private double mLongtitude;    private double tLatitude;    private double tLongtitude;    private String mlocationDesc;    private String tlocationDesc;    // 自定义定位图标    private BitmapDescriptor mIconLocation;    private MyOrientationListener myOrientationListener;    private float mCurrentX;    private LocationMode mLocationMode;    // 覆盖物相关    private BitmapDescriptor mMarker;    private RelativeLayout mMarkerLy;    private CountryBean mCountryBean;    @Override    protected void initView() {        // requestWindowFeature(Window.FEATURE_NO_TITLE);        // 在使用SDK各组件之前初始化context信息，传入ApplicationContext        // 注意该方法要再setContentView方法之前实现//		getWindow().setFlags(WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY,//				WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY);        try {            getWindow().addFlags(WindowManager.LayoutParams.class.getField("FLAG_NEEDS_MENU_KEY").getInt(null));        } catch (NoSuchFieldException e) {            // Ignore since this field won't exist in most versions of Android        } catch (IllegalAccessException e) {            Log.w("feelyou.info", "Could not access FLAG_NEEDS_MENU_KEY in addLegacyOverflowButton()", e);        }        SDKInitializer.initialize(getApplicationContext());        ButterKnife.bind(this);        toolBar();        this.context = this;        initView1();        // 初始化定位        initLocation();        initMarker();        mBaiduMap.setOnMarkerClickListener(new OnMarkerClickListener() {            @Override            public boolean onMarkerClick(Marker marker) {                Bundle extraInfo = marker.getExtraInfo();                CountryBean.RowsBean info = (CountryBean.RowsBean) extraInfo.getSerializable("info");//                CountryBean.RowsBean info = (CountryBean.RowsBean) mCountryBean.getRows();                ImageView iv = (ImageView) mMarkerLy                        .findViewById(R.id.id_info_img);                TextView distance = (TextView) mMarkerLy                        .findViewById(R.id.id_info_distance);                TextView name = (TextView) mMarkerLy                        .findViewById(R.id.id_info_name);                TextView zan = (TextView) mMarkerLy                        .findViewById(R.id.id_info_zan);                double d1 = mLongtitude;                double d2 = mLatitude;                double d3 = Double.parseDouble(info.getCoordinate().split(",")[1]);                double d4 = Double.parseDouble(info.getCoordinate().split(",")[0]);                double distance1 = CommonUtils.getDistance(d1, d2, d3, d4);                if (distance1 < 1000.0) {                    distance.setText("距离我" + distance1 + "米");                } else {                    DecimalFormat df = new DecimalFormat("#.00");                    distance.setText("距离我" + df.format(distance1 / 1000) + "千米");                }//                iv.setImageResource(info.getImgId());                name.setText(info.getVillage1());                zan.setText("去这里");                tLatitude = Double.parseDouble(info.getCoordinate().split(",")[1]);                tLongtitude = Double.parseDouble(info.getCoordinate().split(",")[0]);                tlocationDesc = info.getProvince1() + info.getCity1() + info.getTown1() + info.getVillage1();                InfoWindow infoWindow;                TextView tv = new TextView(context);                tv.setBackgroundResource(R.drawable.location_tips);                tv.setPadding(30, 20, 30, 50);                tv.setText(info.getVillage1());                tv.setTextColor(Color.parseColor("#ffffff"));                final LatLng latLng = marker.getPosition();                Point p = mBaiduMap.getProjection().toScreenLocation(latLng);                p.y -= 47;                LatLng ll = mBaiduMap.getProjection().fromScreenLocation(p);                infoWindow = new InfoWindow(tv, ll, 0);                mBaiduMap.showInfoWindow(infoWindow);                mMarkerLy.setVisibility(View.VISIBLE);                return true;            }        });        mBaiduMap.setOnMapClickListener(new OnMapClickListener() {            @Override            public boolean onMapPoiClick(MapPoi arg0) {                return false;            }            @Override            public void onMapClick(LatLng arg0) {                mMarkerLy.setVisibility(View.GONE);                mBaiduMap.hideInfoWindow();            }        });        parameterBean = new ParameterBean();        parameterBean.setParamName("city");        parameterBean.setParamValue("4106");        parameterBean.setOperation("RightLike");        parameterBean.setLogic("AND");        parameter = beanToJSONString(parameterBean);        getPoorCountry();    }    private void getPoorCountry() {        if (CommonUtils.isNetWorkConnected(this)) {            String parameterjson = "[" + parameter.toString() + "]";            OkGo.post(API.COUNTRY_URL)                    .tag(this)                    .params("Key", API.API_KEY)                    .params("page", 1)                    .params("rows", 150)                    .params("sidx", "")                    .params("sord", "desc")                    .params("ParameterJson", parameterjson)                    .execute(new StringDialogCallback(this) {                        @Override                        public void onSuccess(String s, Call call, Response response) {                            Log.e(TAG, "onSuccess: result---------->" + s);                            mCountryBean = new Gson().fromJson(s, new TypeToken<CountryBean>() {                            }.getType());                            addOverlays(mCountryBean.getRows());                        }                    });        } else {            ZToastUtils.showShort(this, R.string.net_error);        }    }    public void onStartBN(View view) {        mMarkerLy.setVisibility(View.GONE);        mBaiduMap.hideInfoWindow();//        Log.e(TAG, "onStartBN: mLongtitude------------>" + mLongtitude);//        Log.e(TAG, "onStartBN: mLatitude------------>" + mLatitude);//        Log.e(TAG, "onStartBN: mlocationDesc------------>" + mlocationDesc);//        Log.e(TAG, "onStartBN: tLongtitude------------>" + tLongtitude);//        Log.e(TAG, "onStartBN: tLatitude------------>" + tLatitude);//        Log.e(TAG, "onStartBN: tlocationDesc------------>" + tlocationDesc);        BNRoutePlanNode sNode = new BNRoutePlanNode(mLongtitude, mLatitude, mlocationDesc, null, BNRoutePlanNode.CoordinateType.BD09LL);        BNRoutePlanNode eNode = new BNRoutePlanNode(tLongtitude, tLatitude, tlocationDesc, null, BNRoutePlanNode.CoordinateType.BD09LL);        CoordinateBD09LL(sNode, eNode);    }    private void toolBar() {        setSupportActionBar(mToolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setDisplayShowTitleEnabled(false);        mToolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }    private void initMarker() {        mMarker = BitmapDescriptorFactory.fromResource(R.drawable.maker);        mMarkerLy = (RelativeLayout) findViewById(R.id.id_maker_ly);    }    private void initLocation() {        mLocationMode = LocationMode.NORMAL;        mLocationClient = new LocationClient(this);        mLocationListener = new MyLocationListener();        mLocationClient.registerLocationListener(mLocationListener);        LocationClientOption option = new LocationClientOption();        option.setCoorType("bd09ll");        option.setIsNeedAddress(true);        option.setOpenGps(true);        option.setScanSpan(1000);        mLocationClient.setLocOption(option);        // 初始化图标        mIconLocation = BitmapDescriptorFactory                .fromResource(R.drawable.navi_map_gps_locked);        myOrientationListener = new MyOrientationListener(context);        myOrientationListener                .setOnOrientationListener(new OnOrientationListener() {                    @Override                    public void onOrientationChanged(float x) {                        mCurrentX = x;                    }                });    }    private void initView1() {        mMapView = (MapView) findViewById(R.id.id_bmapView);        mBaiduMap = mMapView.getMap();        MapStatusUpdate msu = MapStatusUpdateFactory.zoomTo(15.0f);        mBaiduMap.setMapStatus(msu);    }    @Override    protected int getLayout() {        return R.layout.activity_baidu_map;    }    @Override    protected void onResume() {        super.onResume();        // 在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理        mMapView.onResume();    }    @Override    protected Context getActivityContext() {        return this;    }    @Override    protected void onStart() {        super.onStart();        // 开启定位        mBaiduMap.setMyLocationEnabled(true);        if (!mLocationClient.isStarted())            mLocationClient.start();        // 开启方向传感器        myOrientationListener.start();    }    @Override    protected void onPause() {        super.onPause();        // 在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理        mMapView.onPause();    }    @Override    protected void onStop() {        super.onStop();        // 停止定位        mBaiduMap.setMyLocationEnabled(false);        mLocationClient.stop();        // 停止方向传感器        myOrientationListener.stop();    }    @Override    protected void onDestroy() {        super.onDestroy();        // 在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理        mMapView.onDestroy();    }    /*    * 菜单栏 修改器下拉刷新模式    * */    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.id_map_common:                mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);                break;            case R.id.id_map_site:                mBaiduMap.setMapType(BaiduMap.MAP_TYPE_SATELLITE);                break;            case R.id.id_map_traffic:                if (mBaiduMap.isTrafficEnabled()) {                    mBaiduMap.setTrafficEnabled(false);                    item.setTitle("实时交通(off)");                } else {                    mBaiduMap.setTrafficEnabled(true);                    item.setTitle("实时交通(on)");                }                break;            case R.id.id_map_location:                centerToMyLocation();                break;            case R.id.id_map_mode_common:                mLocationMode = LocationMode.NORMAL;                break;            case R.id.id_map_mode_following:                mLocationMode = LocationMode.FOLLOWING;                break;            case R.id.id_map_mode_compass:                mLocationMode = LocationMode.COMPASS;                break;            case R.id.id_add_overlay://                addOverlays(Info.infos);                break;            default:                break;        }        return super.onOptionsItemSelected(item);    }    /**     * 添加覆盖物     *     * @param infos     */    private void addOverlays(List<CountryBean.RowsBean> infos) {        mBaiduMap.clear();        LatLng latLng = null;        Marker marker = null;        OverlayOptions options;        for (CountryBean.RowsBean info : infos) {            // 经纬度            latLng = new LatLng(Double.parseDouble(info.getCoordinate().split(",")[1]),                    Double.parseDouble(info.getCoordinate().split(",")[0]));            // 图标            options = new MarkerOptions().position(latLng).icon(mMarker)                    .zIndex(5);            marker = (Marker) mBaiduMap.addOverlay(options);            Bundle arg0 = new Bundle();            arg0.putSerializable("info", info);            marker.setExtraInfo(arg0);        }        MapStatusUpdate msu = MapStatusUpdateFactory.newLatLng(latLng);        mBaiduMap.setMapStatus(msu);    }    /**     * 定位到我的位置     */    private void centerToMyLocation() {        LatLng latLng = new LatLng(mLatitude, mLongtitude);        MapStatusUpdate msu = MapStatusUpdateFactory.newLatLng(latLng);        mBaiduMap.animateMapStatus(msu);    }    private class MyLocationListener implements BDLocationListener {        @Override        public void onReceiveLocation(BDLocation location) {            MyLocationData data = new MyLocationData.Builder()//                    .direction(mCurrentX)//                    .accuracy(location.getRadius())//                    .latitude(location.getLatitude())//                    .longitude(location.getLongitude())//                    .build();            mBaiduMap.setMyLocationData(data);            // 设置自定义图标            MyLocationConfiguration config = new MyLocationConfiguration(                    mLocationMode, true, mIconLocation);            mBaiduMap.setMyLocationConfigeration(config);            // 更新经纬度            mLongtitude = location.getLongitude();            mLatitude = location.getLatitude();            mlocationDesc = location.getLocationDescribe();            if (isFirstIn) {                LatLng latLng = new LatLng(location.getLatitude(),                        location.getLongitude());                MapStatusUpdate msu = MapStatusUpdateFactory.newLatLng(latLng);                mBaiduMap.animateMapStatus(msu);                isFirstIn = false;                Toast.makeText(context, location.getAddrStr(),                        Toast.LENGTH_SHORT).show();            }        }        @Override        public void onConnectHotSpotMessage(String s, int i) {        }    }}