package com.nxt.net.zhifutongqb.ui.fragment;import android.app.AlertDialog;import android.content.BroadcastReceiver;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Rect;import android.os.Bundle;import android.support.v4.view.ViewPager;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.DividerItemDecoration;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.jaeger.library.StatusBarUtil;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.app.API;import com.nxt.net.zhifutongqb.bean.DailyBean;import com.nxt.net.zhifutongqb.bean.PoorObjectData;import com.nxt.net.zhifutongqb.bean.RequestResponse;import com.nxt.net.zhifutongqb.callback.StringBallDialogCallback;import com.nxt.net.zhifutongqb.ui.activity.HelpDailyActivity;import com.nxt.net.zhifutongqb.ui.activity.HelpEffectActivity;import com.nxt.net.zhifutongqb.ui.activity.OfferListActivity;import com.nxt.net.zhifutongqb.ui.activity.PoorTotalActivity;import com.nxt.net.zhifutongqb.ui.activity.SignHistoryActivity;import com.nxt.net.zhifutongqb.ui.activity.WeatherDetailActivity;import com.nxt.net.zhifutongqb.ui.adapter.CommonAdapter;import com.nxt.net.zhifutongqb.ui.adapter.ViewHolder;import com.nxt.net.zhifutongqb.utils.LocationService;import com.nxt.net.zhifutongqb.utils.WeatherUtil;import com.nxt.net.zhifutongqb.base.ZBaseFragment;import com.nxt.net.zhifutongqb.bean.GalleryModel;import com.nxt.net.zhifutongqb.bean.WeatherDetail;import com.nxt.net.zhifutongqb.ui.activity.BDMapActivity;import com.nxt.net.zhifutongqb.ui.activity.NewsListActivity;import com.nxt.net.zhifutongqb.ui.activity.PoorDetailActivity;import com.nxt.net.zhifutongqb.ui.adapter.PoorDetailAdapter;import com.nxt.net.zhifutongqb.utils.ZPreferenceUtils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import com.nxt.net.zhifutongqb.widget.LoadingDialog;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import okhttp3.Call;import static android.app.Activity.RESULT_OK;/** * Created by Maven on 2017/2/16. * Email: cyjiang_11@163.com * Description: */public class HomeFragment extends ZBaseFragment implements SwipeRefreshLayout.OnRefreshListener {    private static final String TAG = "HomeFragment";    @BindView(R.id.swipe_container)    SwipeRefreshLayout swipeRefreshLayout;    @BindView(R.id.tv_searcher)    TextView tvSearcher;    @BindView(R.id.ll_weather)    LinearLayout llWeather;    @BindView(R.id.iv_weather)    ImageView ivWeather;    @BindView(R.id.tv_location)    TextView tvLocation;    @BindView(R.id.tv_real_time_temperature)    TextView tvRealTimeTemperature;    @BindView(R.id.tv_temperature)    TextView tvTemperature;    @BindView(R.id.tv_help_task)    TextView tvWorkTask;    @BindView(R.id.tv_daily_list)    TextView tvDailyList;    @BindView(R.id.tv_helper_result)    TextView tvHelperResult;    @BindView(R.id.tv_sign_in)    TextView tvSignIn;    @BindView(R.id.tv_channel_news)    TextView tvChannelNews;    @BindView(R.id.tv_channel_offer)    TextView tvChannelOffer;    @BindView(R.id.tv_channel_project)    TextView tvChannelProject;    @BindView(R.id.tv_channel_teach)    TextView tvChannelTeach;    @BindView(R.id.tv_channel_unit)    TextView tvChannelUnit;    @BindView(R.id.tv_channel_org)    TextView tvChannelOrg;    @BindView(R.id.tv_channel_money)    TextView tvChannelMoney;    @BindView(R.id.tv_channel_tel)    TextView tvChannelTel;    @BindView(R.id.tv_object_more)    TextView tvObjectMore;    @BindView(R.id.rv_person)    RecyclerView rvPerson;    @BindView(R.id.listview_common)    ListView mListView;    @BindView(R.id.detail_view)    ViewPager mViewPager;    private LocationService locationService;    private WeatherDetail weatherDetail;    private WeatherDetail.ResultsBean.WeatherDataBean weather;    private String photoUrl;    private String address;    String city;    String addrStr;    String locationDes;    String longitude;    String latitude;    private boolean isregister = false;    private final static int REQUEST_CODE = 0x11;    private final static int REQUEST_CODE_1 = 0x12;    private int REQUEST_SIGN_IN = 0;    private String strSignIn;    protected LoadingDialog loadingDialog;    private int page = 1, rows = 10;    private List<DailyBean.RowsBean> rowsBeanList = new ArrayList<>();    public static List<String> photoUrls = new ArrayList<>();    public String imgUrl;    public String[] imgUrls;    PoorObjectData poorObjectData = new PoorObjectData();    private List<GalleryModel> mDatas = new ArrayList<>();    public List<PoorObjectData> poorObjectDatas = new ArrayList<>();    public int size = 0;    private PoorDetailAdapter mAdapter;    private RecyclerView mRecyclerView;    private RecyclerView.ItemDecoration decoration;    private BroadcastReceiver broadcastReceiver;    @Override    protected void initView(View view) {        swipeRefreshLayout.setColorSchemeResources(                android.R.color.holo_blue_light,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light        );        swipeRefreshLayout.setOnRefreshListener(this);        decoration = new DividerItemDecoration(getActivity(), 1);        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);        mRecyclerView = (RecyclerView) view.findViewById(R.id.rv_person);        int spacingInPixels = getResources().getDimensionPixelSize(R.dimen.space);        mRecyclerView.addItemDecoration(new SpaceItemDecoration(spacingInPixels));        mRecyclerView.setLayoutManager(layoutManager);        showDialog();        initData();        BDStartLocation();    }    @Override    protected int getLayoutId() {        return R.layout.fragment_home;    }    private void initData() {        if (isnetconnected) {            //脱贫状态，0：未脱贫，1：已脱贫，空：全部            OkGo.get(String.format(API.POOR_OBJECT_URL, ZPreferenceUtils.getPrefString(API.USERNAME, ""), 0))                    .tag(this)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result-------------->" + s);                            Log.e(TAG, "onSuccess: result-------------->" + s.length());                            if (s.length() > 2) {                                poorObjectDatas = new Gson().fromJson(s, new TypeToken<List<PoorObjectData>>() {                                }.getType());                                size = poorObjectDatas.size();                                Log.e(TAG, "onSuccess: size---------->" + size);                                for (int i = 0; i < size; i++) {                                    photoUrl = API.HOST + poorObjectDatas.get(i).getHouseholdimgurl().split("\\|")[0];                                    if (poorObjectData.villagename == null) {                                        address = poorObjectDatas.get(i).getCountyname() + poorObjectDatas.get(i).getTownname();                                    } else {                                        address = poorObjectDatas.get(i).getCountyname()                                                + poorObjectDatas.get(i).getTownname()                                                + poorObjectDatas.get(i).getVillagename();                                    }                                    Log.e(TAG, "onSuccess: 第" + i + "个图像介绍------------->" + poorObjectDatas.get(i).getImageurl());                                    mDatas.add(new GalleryModel(photoUrl, poorObjectDatas.get(i).getHouseholdname(), address));                                }                                mAdapter = new PoorDetailAdapter(getActivity(), mDatas);                                mRecyclerView.setAdapter(mAdapter);                                if (swipeRefreshLayout.isRefreshing()) {                                    swipeRefreshLayout.setRefreshing(false);                                }                                dismissDialog();                                initEvent();                            } else {                                if (swipeRefreshLayout.isRefreshing()) {                                    swipeRefreshLayout.setRefreshing(false);                                }                                dismissDialog();                                ZToastUtils.showShort(getActivity(), "您暂时还没有需要帮扶的对象");                            }                        }                    });            String url = String.format(API.DAILY_SEARCH_URL, page, rows, ZPreferenceUtils.getPrefString(API.USER_ID, ""), 0);            OkGo.get(url)                    .tag(this)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, final okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result-------------->" + s);                            if (page == 1) {                                DailyBean dailyBean = new Gson().fromJson(s, new TypeToken<DailyBean>() {                                }.getType());                                rowsBeanList = dailyBean.getRows();                                if (rowsBeanList.size() == 0) {                                    ZToastUtils.showShort(getActivity(), "暂无数据");                                    dismissDialog();                                } else {                                    Log.e(TAG, "onSuccess: result-------------->" + rowsBeanList.get(0).getAddress());                                    showDailyListView();                                }                            } else {                                DailyBean dailyBean = new Gson().fromJson(s, new TypeToken<DailyBean>() {                                }.getType());                                List<DailyBean.RowsBean> addRowsBeanList = dailyBean.getRows();                                if (addRowsBeanList.size() > 0) {                                    rowsBeanList.addAll(addRowsBeanList);                                    showDailyListView();                                } else {                                    ZToastUtils.showShort(getActivity(), "数据加载完毕");                                }                            }                        }                    });        } else {            if (swipeRefreshLayout.isRefreshing()) {                swipeRefreshLayout.setRefreshing(false);            }            dismissDialog();            ZToastUtils.showShort(getActivity(), R.string.network_isnot_available);        }    }    private void getWeather() {        if (isnetconnected) {            String city = null;            try {                city = URLEncoder.encode(tvLocation.getText().toString(), "utf-8");            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }            OkGo.get(String.format(API.BAIDU_WEATHER_URL, city))                    .tag(this)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result---------->" + s);                            weatherDetail = new Gson().fromJson(s, new TypeToken<WeatherDetail>() {                            }.getType());                            weather = weatherDetail.getResults().get(0).getWeather_data().get(0);                            //"date":"周三 03月01日 (实时：9℃)"                            String str = weather.getDate();                            String spStr[] = str.split("\\(");                            String temperature = spStr[1].trim();                            String spStr1[] = temperature.split("\\)");                            String temperature1 = spStr1[0].trim();                            String spStr2[] = temperature1.split("：");                            String temperature2 = spStr2[1].trim();                            tvRealTimeTemperature.setText(temperature2);                            tvTemperature.setText(weather.getTemperature());                            Log.e("temperature", "temperature------->" + temperature2);                            ivWeather.setImageResource(WeatherUtil.getImageresource(weather.getWeather()));                        }                    });        } else {            ZToastUtils.showShort(getActivity(), R.string.net_error);        }    }    private void showDailyListView() {        mListView.setAdapter(new CommonAdapter<DailyBean.RowsBean>(getActivity(), rowsBeanList, R.layout.item_help_daily) {            @Override            public void convert(final ViewHolder holder, final DailyBean.RowsBean rowsBean, final int position, View convertView) {                String str = rowsBean.getCreatedate().trim();                String spStr[] = str.split("T");                String time = spStr[1].trim();                String date = spStr[0].trim();                String spStr1[] = time.split("\\.");                String date1 = spStr1[0].trim();                String signTime = date + "\t" + date1;                if (!rowsBean.getImageurl().equals("")) {                    if (rowsBean.getImageurl().contains(";")) {                        String[] imgUrls = rowsBean.getImageurl().split(";");                        int imNumb = imgUrls.length;                        photoUrls = new ArrayList<String>();                        for (int i = 0; i < imNumb; i++) {                            photoUrls.add(API.HOST + imgUrls[i]);                        }                        holder.setGridView(R.id.gv_help_daily_photo, photoUrls);                        Log.e(TAG, "convert: photoUrls---------->" + photoUrls);                    } else {                        imgUrl = rowsBean.getImageurl();                        photoUrls = new ArrayList<String>();                        photoUrls.add(API.HOST + imgUrl);                        holder.setGridView(R.id.gv_help_daily_photo, photoUrls);                    }                }                holder.setText(R.id.tv_content, rowsBean.getJournal());                holder.setText(R.id.tv_time, signTime);                if (!rowsBean.getAddress().equals("")) {                    holder.setVisible(R.id.tv_daily_location, true);                    holder.setText(R.id.tv_daily_location, rowsBean.getAddress());                }                //完整界面加载，取消加载动画                if (swipeRefreshLayout.isRefreshing()) {                    swipeRefreshLayout.setRefreshing(false);                }                dismissDialog();                //监听事件                holder.setOnClickListener(R.id.tv_delete, new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        //删除操作                        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());                        builder.setTitle(getString(R.string.dialog_delete_daily_title));                        builder.setMessage(getString(R.string.dialog_delete_daily_msg));                        builder.setPositiveButton(getString(R.string.ok), new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                if (isnetconnected) {                                    OkGo.post(API.DAILY_DELET_URL)                                            .tag(this)                                            .params("key", API.API_KEY)                                            .params("KeyValue", rowsBean.getHelpingtravelid())                                            .execute(new StringBallDialogCallback(getActivity()) {                                                @Override                                                public void onSuccess(String s, Call call, okhttp3.Response response) {                                                    Log.e(TAG, "onSuccess: result--------->" + s);                                                    RequestResponse dailResponse = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                                                    }.getType());                                                    if (dailResponse.getCode().equals("1")) {                                                        rowsBeanList.remove(position);                                                        notifyDataSetChanged();                                                        ZToastUtils.showShort(getActivity(), getString(R.string.dialog_delete_daily_success));                                                    } else {                                                        ZToastUtils.showShort(getActivity(), getString(R.string.dialog_delete_daily_fail));                                                    }                                                }                                            });                                } else {                                    ZToastUtils.showShort(getActivity(), getString(R.string.net_error));                                }                            }                        });                        builder.setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        });                        builder.create().show();                    }                });            }        });    }    /***     * Stop location service     */    @Override    public void onStop() {        // TODO Auto-generated method stub        locationService.unregisterListener(mListener); //注销掉监听        locationService.stop(); //停止定位服务        super.onStop();    }    private void BDStartLocation() {//开始定位        locationService = new LocationService(getActivity());        locationService.registerListener(mListener);        locationService.setLocationOption(locationService.getOption());        locationService.start();    }    private BDLocationListener mListener = new BDLocationListener() {        @Override        public void onReceiveLocation(BDLocation bdLocation) {            city = bdLocation.getCity();            addrStr = bdLocation.getAddrStr();            locationDes = bdLocation.getLocationDescribe();            longitude = String.valueOf(bdLocation.getLongitude());            latitude = String.valueOf(bdLocation.getLatitude());//            strSignIn = addrStr + "(" + locationDes.split("在")[1] + ")";            Log.e(TAG, "onReceiveLocation: city--------->" + city);            Log.e(TAG, "onReceiveLocation: addrStr--------->" + addrStr);            Log.e(TAG, "onReceiveLocation: locationDes--------->" + locationDes);            Log.e(TAG, "onReceiveLocation: latitude--------->" + latitude);            Log.e(TAG, "onReceiveLocation: strSignIn--------->" + strSignIn);            locationService.unregisterListener(mListener); //注销掉监听            locationService.stop();            if (REQUEST_SIGN_IN == 1) {                showSignInDialog(strSignIn);                REQUEST_SIGN_IN = 2;            } else if (REQUEST_SIGN_IN == 2) {                ZToastUtils.showShort(getActivity(), "111111111111111");            } else {                tvLocation.setText(city);                getWeather();            }        }        @Override        public void onConnectHotSpotMessage(String s, int i) {        }    };    @Override    @OnClick({R.id.ll_weather,            R.id.tv_help_task, R.id.tv_daily_list, R.id.tv_helper_result, R.id.tv_sign_in,            R.id.tv_channel_news, R.id.tv_channel_offer, R.id.tv_channel_project, R.id.tv_channel_teach,            R.id.tv_channel_unit, R.id.tv_channel_org, R.id.tv_channel_money, R.id.tv_channel_tel,            R.id.tv_object_more})    public void onClick(View view) {        switch (view.getId()) {            //天气情况            case R.id.ll_weather:                Log.e(TAG, "onClick: areadddd---------->" + tvLocation.getText());                Bundle extras = new Bundle();                extras.putSerializable("data", weatherDetail);                startActivityForResult(new Intent(getActivity(), WeatherDetailActivity.class)                        .putExtras(extras)                        .putExtra(API.AREA, tvLocation.getText()), REQUEST_CODE);                break;            //帮扶任务            case R.id.tv_help_task:                startActivity(new Intent(getActivity(), BDMapActivity.class));                break;            //帮扶日志            case R.id.tv_daily_list:                startActivity(new Intent(getActivity(), HelpDailyActivity.class));                break;            //帮扶成效            case R.id.tv_helper_result:                startActivity(new Intent(getActivity(), HelpEffectActivity.class));                break;            //下乡签到            case R.id.tv_sign_in:                REQUEST_SIGN_IN = 1;                BDStartLocation();                break;            //新闻资讯            case R.id.tv_channel_news:                startActivity(new Intent(getActivity(), NewsListActivity.class));                break;            //招聘用工            case R.id.tv_channel_offer:                startActivity(new Intent(getActivity(), OfferListActivity.class));                break;            //扶贫项目            case R.id.tv_channel_project:                break;            //农技指导            case R.id.tv_channel_teach:                break;            //帮扶单位            case R.id.tv_channel_unit:                break;            //组织架构            case R.id.tv_channel_org:                break;            //帮扶资金            case R.id.tv_channel_money:                break;            //实用电话            case R.id.tv_channel_tel:                break;            //更多            case R.id.tv_object_more:                startActivityForResult(new Intent(getActivity(), PoorTotalActivity.class), 2);                break;            default:                break;        }    }    //下乡签到dialog    private void showSignInDialog(String msg) {        Log.e(TAG, "showSignInDialog: msg=======================" + msg);        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        builder.setTitle(getString(R.string.dialog_sign_in_title));        builder.setMessage(msg);        builder.setPositiveButton(getString(R.string.dialog_sign_in_ok), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                commitSignIn();            }        });        builder.setNegativeButton(getString(R.string.dialog_sign_in_cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        builder.create().show();    }    private void commitSignIn() {        if (isnetconnected) {            OkGo.post(API.DAILY_ADD_OR_EDIT_URL)                    .tag(getActivity())                    .params("key", "KEY69B5B31F-8355-4234-B9C6-B6AA1EF92EA7")                    .params("Account", ZPreferenceUtils.getPrefString(API.USERNAME, ""))                    .params("Address", addrStr)                    .params("Coordinate", longitude + "," + latitude)                    .params("journal", ZPreferenceUtils.getPrefString(API.USER_NAME, "") + "在" + addrStr + locationDes.split("在")[1] + "签到")                    .params("type", "1")                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: signIN result------------>" + s);                            RequestResponse dailyResponse = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                            }.getType());                            switch (dailyResponse.getCode()) {                                case "1":                                    ZToastUtils.showShort(getActivity(), "您已成功签到");                                    startActivity(new Intent(getActivity(), SignHistoryActivity.class));                                    break;                                case "0":                                    ZToastUtils.showShort(getActivity(), "签到失败");                                    break;                                case "-1":                                    ZToastUtils.showShort(getActivity(), "签到失败");                                    break;                                case "-2":                                    ZToastUtils.showShort(getActivity(), "未获取到账户信息");                                    break;                                case "-3":                                    ZToastUtils.showShort(getActivity(), "签到失败");                                    break;                                default:                                    break;                            }                        }                    });        } else {            ZToastUtils.showShort(getActivity(), R.string.network_isnot_available);        }    }    private void initEvent() {        mAdapter.setOnItemClickLitener(new PoorDetailAdapter.OnItemClickLitener() {            @Override            public void onItemClick(View view, int position) {                startActivityForResult(new Intent(getActivity(), PoorDetailActivity.class)                        .putExtra("poorObjectId", poorObjectDatas.get(position).getPoorhouseholdsinfoid()), 1);            }            @Override            public void onItemLongClick(View view, int position) {                Toast.makeText(getActivity(), position + " long click",                        Toast.LENGTH_SHORT).show();            }        });    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            if (requestCode == REQUEST_CODE) {                tvLocation.setText(data.getStringExtra(API.AREA));                getWeather();            }            if (requestCode == 1 | requestCode == 2) {                onRefresh();            }        }    }    @Override    protected void setStatusBar() {        StatusBarUtil.setTranslucentForImageViewInFragment(getActivity(), null);    }    @Override    public void onRefresh() {        if (poorObjectDatas.size() > 0) {            poorObjectDatas.clear();            mDatas.clear();            Log.e(TAG, "onRefresh: poorDatas---------->" + poorObjectDatas.size());        }        REQUEST_SIGN_IN = 0;        initData();        BDStartLocation();    }    //设置recycleview的item间隔    private class SpaceItemDecoration extends RecyclerView.ItemDecoration {        private int space;        private SpaceItemDecoration(int space) {            this.space = space;        }        @Override        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {            if (parent.getChildPosition(view) != 0) {                outRect.left = space;            }        }    }    @Override    public void onDestroy() {        super.onDestroy();        Log.e(TAG, "onDestroy: istrue" + "111111");        dismissDialog();    }}