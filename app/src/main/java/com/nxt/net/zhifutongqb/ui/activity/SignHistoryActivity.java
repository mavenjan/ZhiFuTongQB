package com.nxt.net.zhifutongqb.ui.activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.os.Handler;import android.os.Message;import android.support.v4.widget.SwipeRefreshLayout;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.widget.AbsListView;import android.widget.ListView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.app.API;import com.nxt.net.zhifutongqb.ui.adapter.ViewHolder;import com.nxt.net.zhifutongqb.base.BaseTitleActivity;import com.nxt.net.zhifutongqb.bean.DailyBean;import com.nxt.net.zhifutongqb.bean.RequestResponse;import com.nxt.net.zhifutongqb.callback.StringBallDialogCallback;import com.nxt.net.zhifutongqb.ui.adapter.CommonAdapter;import com.nxt.net.zhifutongqb.utils.ZPreferenceUtils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import com.nxt.net.zhifutongqb.widget.SwipeMenuLayout;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import okhttp3.Call;/** * Created by Maven on 2017/3/6. * Email: cyjiang_11@163.com * Description: */public class SignHistoryActivity extends BaseTitleActivity implements SwipeRefreshLayout.OnRefreshListener, AbsListView.OnScrollListener {    private static final String TAG = "SignHistoryActivity";    @BindView(R.id.listview_common)    ListView mListview;    @BindView(R.id.swipe_container)    SwipeRefreshLayout swipeRefreshLayout;    private View headerView;    private View footerview;    private List<DailyBean.RowsBean> rowsBeanList = new ArrayList<>();    private boolean scrollFlag = false;// 标记是否滑动    private int page = 1, rows = 10;    @Override    protected void initView() {        headerView = LayoutInflater.from(this).inflate(R.layout.layout_empty_heade, null);        mListview.addHeaderView(headerView);        footerview = LayoutInflater.from(this).inflate(R.layout.default_loading, null);        swipeRefreshLayout.setColorSchemeResources(                android.R.color.holo_blue_light,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light        );        swipeRefreshLayout.setOnRefreshListener(this);        mListview.setOnScrollListener(this);        showDialog();        getDaily();    }    @Override    protected int getLayout() {        return R.layout.activity_sign_history;    }    private void getDaily() {        mListview.removeFooterView(footerview);        if (isnetconnected) {            String url = String.format(API.DAILY_SEARCH_URL, page, rows, ZPreferenceUtils.getPrefString(API.USER_ID, ""), 1);            OkGo.get(url)                    .tag(this)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, final okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result-------------->" + s);                            if (page == 1) {                                DailyBean dailyBean = new Gson().fromJson(s, new TypeToken<DailyBean>() {                                }.getType());                                rowsBeanList = dailyBean.getRows();                                if (rowsBeanList.size()==0){                                    ZToastUtils.showShort(SignHistoryActivity.this,"暂无数据");                                    dismissDialog();                                }else {                                    Log.e(TAG, "onSuccess: result-------------->" + rowsBeanList.get(0).getAddress());                                    showDailyListView();                                }                            } else {                                DailyBean dailyBean = new Gson().fromJson(s, new TypeToken<DailyBean>() {                                }.getType());                                List<DailyBean.RowsBean> addRowsBeanList = dailyBean.getRows();                                if (addRowsBeanList.size() > 0) {                                    rowsBeanList.addAll(addRowsBeanList);                                    showDailyListView();                                } else {                                    ZToastUtils.showShort(SignHistoryActivity.this, "数据加载完毕");                                }                            }                        }                    });        } else {            if (swipeRefreshLayout.isRefreshing()) {                swipeRefreshLayout.setRefreshing(false);            }            dismissDialog();            ZToastUtils.showShort(this, R.string.net_error);        }    }    private void showDailyListView() {        mListview.setAdapter(new CommonAdapter<DailyBean.RowsBean>(SignHistoryActivity.this, rowsBeanList, R.layout.item_sign_daily) {            @Override            public void convert(final ViewHolder holder, final DailyBean.RowsBean rowsBean, final int position, View convertView) {                String str = rowsBean.getCreatedate().trim();                String spStr[] = str.split("T");                String time = spStr[1].trim();                String date = spStr[0].trim();                String spStr1[] = time.split("\\.");                String date1 = spStr1[0].trim();                String signTime = date + "\t" + date1;                holder.setText(R.id.tv_content, rowsBean.getJournal());                holder.setText(R.id.tv_time, signTime);                if (swipeRefreshLayout.isRefreshing()) {                    swipeRefreshLayout.setRefreshing(false);                }                dismissDialog();                //可以根据自己需求设置一些选项(这里设置了IOS阻塞效果以及item的依次左滑、右滑菜单)//                                        ((SwipeMenuLayout) holder.getConvertView()).setIos(true).setLeftSwipe(position % 2 == 0 ? true : false);                ((SwipeMenuLayout) holder.getConvertView()).setIos(true).setLeftSwipe(true);                //监听事件                holder.setOnClickListener(R.id.ll_content, new View.OnClickListener() {                    @Override                    public void onClick(View v) {//                        Toast.makeText(SignHistoryActivity.this, "点击了：" + position, Toast.LENGTH_SHORT).show();                    }                });                holder.setOnClickListener(R.id.btn_zd, new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        //在ListView里，点击侧滑菜单上的选项时，如果想让侧滑菜单同时关闭，调用这句话                        ((SwipeMenuLayout) holder.getConvertView()).quickClose();                    }                });                holder.setOnClickListener(R.id.btn_delete, new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        //在ListView里，点击侧滑菜单上的选项时，如果想让侧滑菜单同时关闭，调用这句话                        ((SwipeMenuLayout) holder.getConvertView()).quickClose();                        //删除操作                        AlertDialog.Builder builder = new AlertDialog.Builder(SignHistoryActivity.this);                        builder.setTitle(getString(R.string.dialog_delete_daily_title));                        builder.setMessage(getString(R.string.dialog_delete_daily_msg));                        builder.setPositiveButton(getString(R.string.ok), new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                if (isnetconnected) {                                    OkGo.post(API.DAILY_DELET_URL)                                            .tag(this)                                            .params("key", "KEY69B5B31F-8355-4234-B9C6-B6AA1EF92EA7")                                            .params("KeyValue", rowsBean.getHelpingtravelid())                                            .execute(new StringBallDialogCallback(SignHistoryActivity.this) {                                                @Override                                                public void onSuccess(String s, Call call, okhttp3.Response response) {                                                    Log.e(TAG, "onSuccess: result--------->" + s);                                                    RequestResponse dailResponse = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                                                    }.getType());                                                    if (dailResponse.getCode().equals("1")) {                                                        rowsBeanList.remove(position);                                                        notifyDataSetChanged();                                                        ZToastUtils.showShort(SignHistoryActivity.this, getString(R.string.dialog_delete_daily_success));                                                    } else {                                                        ZToastUtils.showShort(SignHistoryActivity.this, getString(R.string.dialog_delete_daily_fail));                                                    }                                                }                                            });                                } else {                                    ZToastUtils.showShort(SignHistoryActivity.this, getString(R.string.net_error));                                }                            }                        });                        builder.setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        });                        builder.create().show();                    }                });                //长按监听                holder.setOnLongClickListener(R.id.ll_content, new View.OnLongClickListener() {                    @Override                    public boolean onLongClick(View v) {                        return true;                    }                });            }        });    }    private Handler handler = new Handler() {        @Override        public void handleMessage(Message msg) {            if (msg.what == 1) {                page++;            }            getDaily();            super.handleMessage(msg);        }    };    private void loadMore() {        runOnUiThread(new Runnable() {            @Override            public void run() {                handler.sendEmptyMessageDelayed(1, 1500);            }        });    }    @Override    public void onRefresh() {        page = 1;        if (rowsBeanList != null) {            rowsBeanList.clear();        }        getDaily();    }    @Override    public void onScrollStateChanged(AbsListView view, int scrollState) {        switch (scrollState) {            // 当不滚动时            case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:// 是当屏幕停止滚动时                scrollFlag = false;                // 判断滚动到底部                if (mListview.getLastVisiblePosition() == (mListview                        .getCount() - 1)) {                    mListview.addFooterView(footerview);                    loadMore();                }                // 判断滚动到顶部                if (mListview.getFirstVisiblePosition() == 0) {                }                break;            case AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:// 滚动时                scrollFlag = true;                break;            case AbsListView.OnScrollListener.SCROLL_STATE_FLING:// 是当用户由于之前划动屏幕并抬起手指，屏幕产生惯性滑动时                scrollFlag = false;                break;        }    }    @Override    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {    }}