package com.nxt.net.zhifutongqb.ui.activity;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.Rect;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.TextureView;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.navisdk.adapter.BNRoutePlanNode;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.lzy.imagepicker.ImagePicker;import com.lzy.imagepicker.bean.ImageItem;import com.lzy.imagepicker.ui.ImageGridActivity;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.app.API;import com.nxt.net.zhifutongqb.base.BaseBNTitleActivity;import com.nxt.net.zhifutongqb.bean.GalleryModel;import com.nxt.net.zhifutongqb.bean.ParameterBean;import com.nxt.net.zhifutongqb.bean.PoorFamilyBean;import com.nxt.net.zhifutongqb.bean.PoorIncomeBean;import com.nxt.net.zhifutongqb.bean.RequestResponse;import com.nxt.net.zhifutongqb.callback.StringBallDialogCallback;import com.nxt.net.zhifutongqb.ui.adapter.CommonAdapter;import com.nxt.net.zhifutongqb.ui.adapter.PoorDetailRVAdapter;import com.nxt.net.zhifutongqb.ui.adapter.ViewHolder;import com.nxt.net.zhifutongqb.utils.LocationService;import com.nxt.net.zhifutongqb.utils.UploadPhotoUtils;import com.nxt.net.zhifutongqb.bean.PoorDetailData;import com.nxt.net.zhifutongqb.bean.PoorProLifeBean;import com.nxt.net.zhifutongqb.callback.StringDialogCallback;import com.nxt.net.zhifutongqb.utils.ZPreferenceUtils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import java.io.ByteArrayOutputStream;import java.io.File;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import okhttp3.Call;import okhttp3.Response;/** * Created by Maven on 2017/2/23. * Email: cyjiang_11@163.com * Description: */public class PoorDetailActivity extends BaseBNTitleActivity implements SwipeRefreshLayout.OnRefreshListener {    private static final String TAG = "PoorDetailActivity";    @BindView(R.id.swipe_container)    SwipeRefreshLayout swipeRefreshLayout;    @BindView(R.id.left_image)    ImageView ivBack;    @BindView(R.id.iv_person_photo)    ImageView ivPersonPhoto;    @BindView(R.id.bt_get_local)    Button btGetLocal;    @BindView(R.id.btn_help_you)    Button btnHelpYou;    @BindView(R.id.tv_name1)    TextView tvName1;    @BindView(R.id.tv_person_num1)    TextView tvPersonNum1;    @BindView(R.id.tv_house_local1)    TextView tvHouseLocal1;    @BindView(R.id.tv_address1)    TextView tvAddress1;    @BindView(R.id.tv_house_attribute1)    TextView tvHouseAttribute1;    @BindView(R.id.tv_season1)    TextView tvSeason1;    @BindView(R.id.tv_income1)    TextView tvIncome1;    @BindView(R.id.tv_in_time1)    TextView tvInTime1;    @BindView(R.id.tv_out_time1)    TextView tvOutTime1;    @BindView(R.id.rv_person_house)    RecyclerView mRecyclerView;    @BindView(R.id.toolbar)    Toolbar toolbar;    protected AlertDialog mAlertDialog1;    protected AlertDialog mAlertDialog2;    protected AlertDialog mAlertDialog3;    protected AlertDialog mAlertDialog4;    private static LocationService locationService;    private PoorDetailData mPoorDetailData;    private List<GalleryModel> mDatas;    private PoorDetailRVAdapter mAdapter;    private String personPhotoUrl;    private String housePhotoUrl1;    private String housePhotoUrl2;    private String housePhotoUrl3;    private String housePhotoUrl4;    private String housePhotoUrl5;    private String housePhotoUrl6;    private String housePhotoUrl7;    private String poorHoldsInfoId;    private String mRemarker;    private String mImgNum;    private ProgressDialog dialog;    protected static final int CHOOSE_PICTURE = 0;    protected static final int TAKE_PICTURE = 1;    private static final int CROP_SMALL_PICTURE = 2;    protected static Uri tempUri;    private String addrStr;    private String locationDes;    private String longitude;    private String latitude;    private String strSignIn;    public static List<String> housePhotoUrls = new ArrayList<>();    public static List<String> housePhotoUrlsBig = new ArrayList<>();    public String[] housePhotoRemarks;    private int LOCTAG = 0;    private List<PoorFamilyBean.RowsBean> poorFamilyList = new ArrayList<>();    @Override    protected void initView() {        application.addActivity(this);        mAlertDialog1 = new AlertDialog.Builder(this).create();        mAlertDialog2 = new AlertDialog.Builder(this).create();        mAlertDialog3 = new AlertDialog.Builder(this).create();        mAlertDialog4 = new AlertDialog.Builder(this).create();        toolbar.setTitle("信息详情");        toolbar.setTitleTextColor(Color.WHITE);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        toolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        Intent intent = this.getIntent();        poorHoldsInfoId = intent.getStringExtra("poorObjectId");        Log.e(TAG, "initView: poorId--------->" + poorHoldsInfoId);        swipeRefreshLayout.setColorSchemeResources(                android.R.color.holo_blue_light,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light        );        swipeRefreshLayout.setOnRefreshListener(this);        LinearLayoutManager layoutManager = new LinearLayoutManager(this);        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);        int spacingInPixels = getResources().getDimensionPixelSize(R.dimen.space);        mRecyclerView.addItemDecoration(new SpaceItemDecoration(spacingInPixels));        mRecyclerView.setLayoutManager(layoutManager);        showDialog();        getPoorObjectData();        initFamilyMemberDialog();        initFamilyMemberDetailDialog();//        initFamilyMemberDetailDialog();//        initFamilyMemberDetailDialog();    }    @Override    protected int getLayout() {        return R.layout.activity_poor_detail;    }    private void getPoorObjectData() {        if (isnetconnected) {            String url = String.format(API.POOR_OBJECT_DATA_URL, poorHoldsInfoId);            Log.e(TAG, "getPoorObjectData: url----------->" + url);            OkGo.get(url)                    .tag(this)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: poor_data---------->" + s);                            mPoorDetailData = new Gson().fromJson(s, new TypeToken<PoorDetailData>() {                            }.getType());                            showPoorDetailView();                        }                    });        } else {            if (swipeRefreshLayout.isRefreshing()) {                swipeRefreshLayout.setRefreshing(false);            }            dismissDialog();            ZToastUtils.showShort(PoorDetailActivity.this, getString(R.string.net_error));        }    }    private void showPoorDetailView() {        if (!TextUtils.isEmpty(mPoorDetailData.getHouseholdName())) {            tvName1.setText(mPoorDetailData.getHouseholdName());        //姓名        } else {            tvName1.setText("");        }        if (!TextUtils.isEmpty(String.valueOf(mPoorDetailData.getPopulation()))) {            tvPersonNum1.setText(String.valueOf(mPoorDetailData.getPopulation()));      //人口数        } else {            tvPersonNum1.setText("");      //人口数        }        if (!TextUtils.isEmpty(String.valueOf(mPoorDetailData.getCoordinate()))) {            tvHouseLocal1.setText(mPoorDetailData.getCoordinate());     //坐标        } else {            tvHouseLocal1.setText("");        }        if (!TextUtils.isEmpty(String.valueOf(mPoorDetailData.getCity1())) ||                !TextUtils.isEmpty(String.valueOf(mPoorDetailData.getTown1())) ||                !TextUtils.isEmpty(String.valueOf(mPoorDetailData.getVillage1()))) {            String address = mPoorDetailData.getCity1()                    + mPoorDetailData.getCounty1()                    + mPoorDetailData.getTown1()                    + mPoorDetailData.getVillage1();            tvAddress1.setText(address);        } else {            tvHouseLocal1.setText("");        }        if (!TextUtils.isEmpty(String.valueOf(mPoorDetailData.getHouseholdProperty()))) {            tvHouseAttribute1.setText(mPoorDetailData.getHouseholdProperty());      //户属性        } else {            tvHouseAttribute1.setText("");        }        if (!TextUtils.isEmpty(String.valueOf(mPoorDetailData.getMainCausesPoverty()))) {            tvSeason1.setText(mPoorDetailData.getMainCausesPoverty());      //主要致贫原因        } else {            tvSeason1.setText("");        }        if (!TextUtils.isEmpty(String.valueOf(mPoorDetailData.getAnnualPerCapitaIncome()))) {            tvIncome1.setText(String.valueOf(mPoorDetailData.getAnnualPerCapitaIncome()));   //年人均收入        } else {            tvIncome1.setText("");        }        if (!TextUtils.isEmpty(mPoorDetailData.getRecognitionTime())) {            tvInTime1.setText(mPoorDetailData.getRecognitionTime().split("T")[0]);        //识别时间        } else {            tvInTime1.setText("");        //识别时间        }        if (!TextUtils.isEmpty(mPoorDetailData.getPovertyEstimatedTime1())) {            tvOutTime1.setText(mPoorDetailData.getPovertyEstimatedTime1().split("T")[0]);      //预计脱贫时间        } else {            tvOutTime1.setText("");        }        personPhotoUrl = API.HOST + mPoorDetailData.getImageUrl1();        //头像地址        String photoUrl1 = mPoorDetailData.getImageUrl2().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl2();        String photoUrl2 = mPoorDetailData.getImageUrl3().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl3();        String photoUrl3 = mPoorDetailData.getImageUrl4().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl4();        String photoUrl4 = mPoorDetailData.getImageUrl5().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl5();        String photoUrl5 = mPoorDetailData.getImageUrl6().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl6();        String photoUrl6 = mPoorDetailData.getImageUrl7().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl7();        String photoUrl7 = mPoorDetailData.getImageUrl8().equals("") ? API.NORMAL_URL : mPoorDetailData.getImageUrl8();        Log.e(TAG, "showPoorDetailView: 3personUrl--------->" + personPhotoUrl);        housePhotoUrl1 = API.HOST + photoUrl1;        //客厅        housePhotoUrl2 = API.HOST + photoUrl2;        //正面        housePhotoUrl3 = API.HOST + photoUrl3;        //左面        housePhotoUrl4 = API.HOST + photoUrl4;        //右面        housePhotoUrl5 = API.HOST + photoUrl5;        //厨房        housePhotoUrl6 = API.HOST + photoUrl6;        //厕所        housePhotoUrl7 = API.HOST + photoUrl7;        //其他        housePhotoUrls.clear();        housePhotoUrls.add(housePhotoUrl1);        housePhotoUrls.add(housePhotoUrl2);        housePhotoUrls.add(housePhotoUrl3);        housePhotoUrls.add(housePhotoUrl4);        housePhotoUrls.add(housePhotoUrl5);        housePhotoUrls.add(housePhotoUrl6);        housePhotoUrls.add(housePhotoUrl7);        housePhotoRemarks = new String[]{"客厅", "正面", "左侧", "右侧", "厨房", "厕所", "其他"};        Glide.with(this).load(personPhotoUrl)                .diskCacheStrategy(DiskCacheStrategy.ALL)                .skipMemoryCache(false)                .into(ivPersonPhoto);        mDatas = new ArrayList<>();        for (int i = 0; i < 7; i++) {            mDatas.add(new GalleryModel(housePhotoUrls.get(i), "测试", housePhotoRemarks[i]));    //"测试"为无用字段        }        mAdapter = new PoorDetailRVAdapter(this, mDatas);        mRecyclerView.setAdapter(mAdapter);        if (swipeRefreshLayout.isRefreshing()) {            swipeRefreshLayout.setRefreshing(false);        }        dismissDialog();        initEvent();    }    //贫困户图片单击事件    private void initEvent() {        mAdapter.setOnItemClickLitener(new PoorDetailRVAdapter.OnItemClickLitener() {            @Override            public void onItemClick(View view, int position) {                mImgNum = "ImageUrl" + position;                mRemarker = housePhotoRemarks[position];                checkDialog(position);            }            @Override            public void onItemLongClick(View view, int position) {            }        });    }    private void checkDialog(final int position) {        final AlertDialog dlg = new AlertDialog.Builder(this).create();        dlg.show();        Window window = dlg.getWindow();        window.setContentView(R.layout.dialog_social_main);        TextView tv_paizhao = (TextView) window.findViewById(R.id.tv_content1);        tv_paizhao.setText("浏览图片");        tv_paizhao.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                Intent it = new Intent(Intent.ACTION_VIEW);                it.setDataAndType(Uri.parse(housePhotoUrls.get(position)), "image/*");                startActivity(it);                dlg.cancel();            }        });        TextView tv_xiangce = (TextView) window.findViewById(R.id.tv_content2);        tv_xiangce.setText("上传图片");        tv_xiangce.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                ImagePicker.getInstance().setMultiMode(false);                Intent intent = new Intent(PoorDetailActivity.this, ImageGridActivity.class);                startActivityForResult(intent, 100);                dlg.cancel();            }        });    }    private void BDStartLocation() {//开始定位        locationService.registerListener(mListener);        locationService.setLocationOption(locationService.getOption());        locationService.start();    }    private BDLocationListener mListener = new BDLocationListener() {        @Override        public void onReceiveLocation(BDLocation bdLocation) {            addrStr = bdLocation.getAddrStr();            locationDes = bdLocation.getLocationDescribe();            longitude = String.valueOf(bdLocation.getLongitude());            latitude = String.valueOf(bdLocation.getLatitude());            strSignIn = addrStr + "当前坐标:\n" + "(" + longitude + "," + latitude + ")";            Log.e(TAG, "onReceiveLocation: addrStr--------->" + addrStr);            Log.e(TAG, "onReceiveLocation: locationDes--------->" + locationDes);            Log.e(TAG, "onReceiveLocation: latitude--------->" + latitude);            Log.e(TAG, "onReceiveLocation: strSignIn--------->" + strSignIn);            if (LOCTAG == 1) {                showUpdateTudeDialog(strSignIn);            }            if (LOCTAG == 2) {                BNRoutePlanNode sNode = new BNRoutePlanNode(Double.parseDouble(longitude), Double.parseDouble(latitude), bdLocation.getLocationDescribe(), null, BNRoutePlanNode.CoordinateType.BD09LL);                BNRoutePlanNode eNode = new BNRoutePlanNode(Double.parseDouble(tvHouseLocal1.getText().toString().split(",")[0]), Double.parseDouble(tvHouseLocal1.getText().toString().split(",")[1]), "贫困户" + tvName1.getText().toString(), null, BNRoutePlanNode.CoordinateType.BD09LL);                CoordinateBD09LL(sNode, eNode);            }        }        @Override        public void onConnectHotSpotMessage(String s, int i) {        }    };    private void showUpdateTudeDialog(String strSignIn) {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setTitle(getString(R.string.dialog_update_tude_title));        builder.setMessage(strSignIn);        builder.setPositiveButton(getString(R.string.dialog_update_tude_ok), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                commitUpdate();            }        });        builder.setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                dismissDialog();            }        });        builder.create().show();    }    private void commitUpdate() {        String tudeUrl = String.format(API.POOR_OBJECT_UPDATE_TUDE_URL, longitude, latitude, poorHoldsInfoId);        if (isnetconnected) {            OkGo.get(tudeUrl)                    .tag(this)                    .execute(new StringBallDialogCallback(this) {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result--------->" + s);                            RequestResponse dailyResponse = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                            }.getType());                            dismissDialog();                            switch (dailyResponse.getCode()) {                                case "1":                                    ZToastUtils.showShort(PoorDetailActivity.this, "坐标信息已更新");                                    onRefresh();                                    break;                                default:                                    ZToastUtils.showShort(PoorDetailActivity.this, "更新失败");                                    break;                            }                        }                    });        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.poor_detail_menu, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.family_member:        //家庭成员                getFamilyPersonData();                break;            case R.id.production_life:      //生产生活                getProLifeData();                break;            case R.id.income_child:     //收入情况                getIncomeData();                break;        }        return super.onOptionsItemSelected(item);    }    //获取贫困户家庭成员信息    private void getFamilyPersonData() {        if (isnetconnected) {            String parameterjson = "[" + parameter.toString() + "]";            OkGo.post(API.POOR_FAMILY_PERSON_URL)                    .tag(this)                    .params("key", API.API_KEY)                    .params("parameterJson", parameterjson)                    .params("page", 1)                    .params("rows", 30)                    .params("sidx", "Name")                    .params("sord", "desc")                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, Response response) {                            Log.e(TAG, "onSuccess: result==========>" + s);                            PoorFamilyBean familyBean = new Gson().fromJson(s, new TypeToken<PoorFamilyBean>() {                            }.getType());                            poorFamilyList = familyBean.getRows();                            showFamilyMemberDialog();//                            showFamilyPersonDialog();                            mAlertDialog1.show();                        }                    });        } else {            ZToastUtils.showShort(this, getString(R.string.net_error));        }    }    //获取贫困户生产生活信息    private void getProLifeData() {        if (isnetconnected) {            String productLifeUrl = String.format(API.POOR_PRODUCT_LIFE_URL);            OkGo.post(productLifeUrl)                    .tag(this)                    .params("key", API.API_KEY)                    .params("KeyValue", poorHoldsInfoId)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, Response response) {                            Log.e(TAG, "onSuccess: proResult==========>" + s);                            PoorProLifeBean proLifeBean = new Gson().fromJson(s, new TypeToken<PoorProLifeBean>() {                            }.getType());                            showProLifeDialog();                        }                    });        } else {            ZToastUtils.showShort(this, getString(R.string.net_error));        }    }    //获取贫困户收入情况    private void getIncomeData() {        if (isnetconnected) {            String incomeUrl = String.format(API.POOR_INCOME_URL);            OkGo.post(incomeUrl)                    .tag(this)                    .params("key", API.API_KEY)                    .params("KeyValue", poorHoldsInfoId)                    .execute(new StringCallback() {                        @Override                        public void onSuccess(String s, Call call, Response response) {                            Log.e(TAG, "onSuccess: incomeResult==========>" + s);                            PoorIncomeBean incomeBean = new Gson().fromJson(s, new TypeToken<PoorIncomeBean>() {                            }.getType());                            showIncomeDialog();                        }                    });        } else {            ZToastUtils.showShort(this, getString(R.string.net_error));        }    }    private ParameterBean parameterBean;    private String parameter;    private ListView mListView;    private EditText etName;    private void initFamilyMemberDialog() {        View dialogView1 = LayoutInflater.from(this).inflate(R.layout.layout_family_members, null);        mListView = (ListView) dialogView1.findViewById(R.id.lv_members);          /*         * 获取圣诞框的窗口对象及参数对象以修改对话框的布局设置,         * 可以直接调用getWindow(),表示获得这个Activity的Window         * 对象,这样这可以以同样的方式改变这个Activity的属性.         */        Window dialogWindow = mAlertDialog1.getWindow();        WindowManager.LayoutParams lp = dialogWindow.getAttributes();        dialogWindow.setGravity(Gravity.LEFT | Gravity.TOP);          /*         * lp.x与lp.y表示相对于原始位置的偏移.         * 当参数值包含Gravity.LEFT时,对话框出现在左边,所以lp.x就表示相对左边的偏移,负值忽略.         * 当参数值包含Gravity.RIGHT时,对话框出现在右边,所以lp.x就表示相对右边的偏移,负值忽略.         * 当参数值包含Gravity.TOP时,对话框出现在上边,所以lp.y就表示相对上边的偏移,负值忽略.         * 当参数值包含Gravity.BOTTOM时,对话框出现在下边,所以lp.y就表示相对下边的偏移,负值忽略.         * 当参数值包含Gravity.CENTER_HORIZONTAL时         * ,对话框水平居中,所以lp.x就表示在水平居中的位置移动lp.x像素,正值向右移动,负值向左移动.         * 当参数值包含Gravity.CENTER_VERTICAL时         * ,对话框垂直居中,所以lp.y就表示在垂直居中的位置移动lp.y像素,正值向右移动,负值向左移动.         * gravity的默认值为Gravity.CENTER,即Gravity.CENTER_HORIZONTAL |         * Gravity.CENTER_VERTICAL.         *         * 本来setGravity的参数值为Gravity.LEFT | Gravity.TOP时对话框应出现在程序的左上角,但在         * 我手机上测试时发现距左边与上边都有一小段距离,而且垂直坐标把程序标题栏也计算在内了,         * Gravity.LEFT, Gravity.TOP, Gravity.BOTTOM与Gravity.RIGHT都是如此,据边界有一小段距离         */        lp.x = 0; // 新位置X坐标        lp.y = 0; // 新位置Y坐标        lp.width = 50; // 宽度        lp.height = 50; // 高度        lp.alpha = 1.0f; // 透明度        // 当Window的Attributes改变时系统会调用此函数,可以直接调用以应用上面对窗口参数的更改,也可以用setAttributes        // dialog.onWindowAttributesChanged(lp);        dialogWindow.setAttributes(lp);        parameterBean = new ParameterBean();        parameterBean.setParamName("PoorHouseholdsInfoId");        parameterBean.setParamValue(poorHoldsInfoId);        parameterBean.setOperation("Equal");        parameterBean.setLogic("AND");        parameter = beanToJSONString(parameterBean);        mAlertDialog1.setView(dialogView1);    }    //显示家庭成员列表    private void showFamilyMemberDialog() {        mListView.setAdapter(new CommonAdapter<PoorFamilyBean.RowsBean>(PoorDetailActivity.this, poorFamilyList, R.layout.item_family_member) {            @Override            public void convert(ViewHolder holder, PoorFamilyBean.RowsBean rowsBean, final int position, View convertView) {                holder.setText(R.id.tv_name, rowsBean.getName());                holder.setOnClickListener(R.id.ll_member, new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        mAlertDialog1.dismiss();                        showFamilyMemberDetailDialog(position);                        mAlertDialog2.show();                    }                });            }        });    }    //初始化家庭成员信息dialog    private void initFamilyMemberDetailDialog() {        View dialogview2 = LayoutInflater.from(this).inflate(R.layout.layout_poor_family_person, null);        etName = (EditText) dialogview2.findViewById(R.id.tv_show_name);        mAlertDialog2.setView(dialogview2);    }    //显示家庭成员信息    private void showFamilyMemberDetailDialog(int position) {        etName.setText(poorFamilyList.get(position).getName());        Log.e(TAG, "showFamilyPersonDialog: name----------------->" + poorFamilyList.get(position).getName());    }    private void showProLifeDialog() {    }    private void showIncomeDialog() {    }    @OnClick({R.id.left_image, R.id.iv_person_photo, R.id.bt_get_local, R.id.bt_goto, R.id.btn_help_you})    public void onClick(View view) {        switch (view.getId()) {            case R.id.left_image:       //返回                finish();                break;            case R.id.iv_person_photo:      //修改用户头像                showPhotoDialog();                break;            case R.id.bt_get_local:     //获取当前坐标，并且上传                LOCTAG = 1;                locationService = new LocationService(this);                BDStartLocation();                break;            case R.id.bt_goto:      //百度导航                LOCTAG = 2;                locationService = new LocationService(this);                BDStartLocation();                break;            case R.id.btn_help_you:     //帮扶该贫困户                startActivity(new Intent(PoorDetailActivity.this, PublishHelpDailyActivity.class));                break;        }    }    private void showPhotoDialog() {        final AlertDialog dlg = new AlertDialog.Builder(this).create();        dlg.show();        Window window = dlg.getWindow();        window.setContentView(R.layout.dialog_social_main);        TextView tv_paizhao = (TextView) window.findViewById(R.id.tv_content1);        tv_paizhao.setText("拍照");        tv_paizhao.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                Intent openCameraIntent = new Intent(                        MediaStore.ACTION_IMAGE_CAPTURE);                tempUri = Uri.fromFile(new File(Environment                        .getExternalStorageDirectory(), "image.jpg"));                // 指定照片保存路径（SD卡），image.jpg为一个临时文件，每次拍照后这个图片都会被替换                openCameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, tempUri);                startActivityForResult(openCameraIntent, TAKE_PICTURE);                dlg.cancel();            }        });        TextView tv_xiangce = (TextView) window.findViewById(R.id.tv_content2);        tv_xiangce.setText("相册");        tv_xiangce.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                Intent openAlbumIntent = new Intent(Intent.ACTION_GET_CONTENT);                openAlbumIntent.setType("image/*");                startActivityForResult(openAlbumIntent, CHOOSE_PICTURE);                dlg.cancel();            }        });    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) { // 如果返回码是可以用的            switch (requestCode) {                case TAKE_PICTURE:                    startPhotoZoom(tempUri); // 开始对图片进行裁剪处理                    break;                case CHOOSE_PICTURE:                    startPhotoZoom(data.getData()); // 开始对图片进行裁剪处理                    break;                case CROP_SMALL_PICTURE:                    if (data != null) {                        setImageToView(data); // 让刚才选择裁剪得到的图片显示在界面上                    }                    break;            }        }        if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {            Log.e(TAG, "onActivityResult: data------------>" + data);            if (data != null && requestCode == 100) {                ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);                Log.e(TAG, "onActivityResult: images----------->" + images.get(0).path);                uploadPicPath(mRemarker, mImgNum, images.get(0).path);            } else {                ZToastUtils.showShort(PoorDetailActivity.this, "没有数据");            }        }    }    /**     * 裁剪图片方法实现     *     * @param uri     */    protected void startPhotoZoom(Uri uri) {        if (uri == null) {            Log.i("tag", "The uri is not exist.");        }        tempUri = uri;        Intent intent = new Intent("com.android.camera.action.CROP");        intent.setDataAndType(uri, "image/*");        // 设置裁剪        intent.putExtra("crop", "true");        // aspectX aspectY 是宽高的比例        intent.putExtra("aspectX", 1);        intent.putExtra("aspectY", 1);        // outputX outputY 是裁剪图片宽高        intent.putExtra("outputX", 150);        intent.putExtra("outputY", 150);        intent.putExtra("return-data", true);        startActivityForResult(intent, CROP_SMALL_PICTURE);    }    /**     * 保存裁剪之后的图片数据     *     * @param     * @param     */    protected void setImageToView(Intent data) {        Bundle extras = data.getExtras();        if (extras != null) {            Bitmap photo = extras.getParcelable("data");            Log.e(TAG, "setImageToView: photo------------->" + photo);            ivPersonPhoto.setImageBitmap(photo);            uploadPic(photo);        }    }    public byte[] Bitmap2Bytes(Bitmap bm) {        ByteArrayOutputStream baos = new ByteArrayOutputStream();        bm.compress(Bitmap.CompressFormat.PNG, 100, baos);        return baos.toByteArray();    }    private void uploadUserAvatar(final byte[] data) {        dialog = ProgressDialog.show(this, getString(R.string.dl_update_photo), getString(R.string.dl_waiting));        dialog.dismiss();    }    private void uploadPic(Bitmap bitmap) {        // 上传至服务器        // ... 可以在这里把Bitmap转换成file，然后得到file的url，做文件上传操作        // 注意这里得到的图片已经是圆形图片了        // bitmap是没有做个圆形处理的，但已经被裁剪了        String imagePath = UploadPhotoUtils.savePhoto(bitmap, Environment                .getExternalStorageDirectory().getAbsolutePath(), String                .valueOf(System.currentTimeMillis()));        Log.e("imagePath", imagePath + "");        // 上传至服务器        if (imagePath != null) {            // 拿着imagePath上传了            // ...            File imageFile;            imageFile = new File(imagePath);            OkGo.post(API.POOR_OBJECT_PHOTO_UPDATE_URL)                    .tag(this)                    .params("key", API.API_KEY)                    .params("ImageUrl", imageFile)                    .params("Marker", "户主")                    .params("PoorHouseholdsInfoId", poorHoldsInfoId)                    .params("Account", ZPreferenceUtils.getPrefString(API.USERNAME, ""))                    .params("Allowed", ".png/.jpg/.gif")                    .execute(new StringDialogCallback(this) {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result----------->" + s);                            RequestResponse response1 = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                            }.getType());                            if (response1.getCode().equals("1")) {                                ZToastUtils.showShort(PoorDetailActivity.this, "更新贫困户头像成功");                                setResult(RESULT_OK);                                onRefresh();                            }                        }                    });        }    }    private void uploadPicPath(String remarker, String imgNum, String imagePath) {        // 上传至服务器        if (imagePath != null) {            // 拿着imagePath上传了            // ...            File imageFile;            imageFile = new File(imagePath);            Log.e(TAG, "uploadPic: id000000>" + poorHoldsInfoId);            Log.e(TAG, "uploadPic: id000000>" + ZPreferenceUtils.getPrefString(API.USERNAME, ""));            OkGo.post(API.POOR_OBJECT_PHOTO_UPDATE_URL)                    .tag(this)                    .params("key", API.API_KEY)                    .params(imgNum, imageFile)                    .params("Marker", remarker)                    .params("PoorHouseholdsInfoId", poorHoldsInfoId)                    .params("Account", ZPreferenceUtils.getPrefString(API.USERNAME, ""))                    .params("Allowed", ".png/.jpg/.gif")                    .execute(new StringDialogCallback(this) {                        @Override                        public void onSuccess(String s, Call call, okhttp3.Response response) {                            Log.e(TAG, "onSuccess: result----------->" + s);                            RequestResponse response1 = new Gson().fromJson(s, new TypeToken<RequestResponse>() {                            }.getType());                            if (response1.getCode().equals("1")) {                                ZToastUtils.showShort(PoorDetailActivity.this, "更新图片成功");                                setResult(RESULT_OK);                                onRefresh();                            }                        }                    });        }    }    @Override    public void onRefresh() {        poorHoldsInfoId = mPoorDetailData.getPoorHouseholdsInfoId();        getPoorObjectData();        if (housePhotoUrls.size() > 0 && mDatas.size() > 0) {            housePhotoUrls.clear();            mDatas.clear();        }    }    @Override    protected Context getActivityContext() {        return this;    }    public class SpaceItemDecoration extends RecyclerView.ItemDecoration {        private int space;        public SpaceItemDecoration(int space) {            this.space = space;        }        @Override        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {            if (parent.getChildPosition(view) != 0)                outRect.left = space;        }    }}