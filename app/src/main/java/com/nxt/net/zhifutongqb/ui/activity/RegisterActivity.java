package com.nxt.net.zhifutongqb.ui.activity;import android.animation.Animator;import android.animation.ValueAnimator;import android.content.Intent;import android.net.Uri;import android.os.Handler;import android.os.Message;import android.text.Editable;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.animation.LinearInterpolator;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.lzy.okgo.OkGo;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.app.API;import com.nxt.net.zhifutongqb.server.SmsObserver;import com.nxt.net.zhifutongqb.utils.CommonUtils;import com.nxt.net.zhifutongqb.utils.MD5Utils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import com.nxt.net.zhifutongqb.base.BaseActivity;import com.nxt.net.zhifutongqb.bean.ModifyResponse;import com.nxt.net.zhifutongqb.callback.StringDialogCallback;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import butterknife.BindView;import butterknife.OnClick;import butterknife.OnFocusChange;import butterknife.OnTextChanged;import okhttp3.Call;import okhttp3.Response;/** * Created by Maven on 2017/2/23. * Email: cyjiang_11@163.com * Description:修改密码，注册 */public class RegisterActivity extends BaseActivity {    private static final String TAG = "RegisterActivity";    @BindView(R.id.regist_view_phone_edit)    EditText registViewPhoneEdit;    @BindView(R.id.regist_view_verification_code_edit)    EditText registViewVerificationCodeEdit;    @BindView(R.id.regist_view_verification_code_btn)    Button registViewVerificationCodeBtn;    @BindView(R.id.regist_view_verification_code_prompt)    TextView registViewVerificationCodePrompt;    @BindView(R.id.regist_view_password_edit)    EditText registViewPasswordEdit;    @BindView(R.id.regist_view_again_password_edit)    EditText registViewAgainPasswordEdit;    @BindView(R.id.regist_view_regist_btn)    Button registViewRegistBtn;    private boolean isforgetpwd = false;    private SmsObserver mObserver;    public static final int MSG_RECIVED_CODE = 2;    private String smsCode;    private String smsURL;    private String userPhone;    private String newPassword;    private String newPasswordMD5;    private String modifyUrl;    @Override    protected void initView() {        application.addActivity(this);        isforgetpwd = getIntent().getBooleanExtra("type", false);        if (isforgetpwd) {            registViewPasswordEdit.setHint(getString(R.string.new_pwd));            registViewRegistBtn.setText(getString(R.string.regist_view_complete_reset_text));        }        /**         * 注册短信监听的方法         */        mObserver = new SmsObserver(RegisterActivity.this, mHandler);        Uri uri = Uri.parse("content://sms");           //将监听到的sms的uri解析出来        getContentResolver().registerContentObserver(uri, true, mObserver);//(监听的uri，是否监听所有变化，监听对象)    }    @Override    protected int getLayout() {        return R.layout.activity_register;    }    /**     * 撤销短信监听的方法     */    @Override    protected void onPause() {        super.onPause();        getContentResolver().unregisterContentObserver(mObserver);    }    private Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                //自动填写手机验证码                case MSG_RECIVED_CODE:                    String code = (String) msg.obj;                    registViewVerificationCodeEdit.setText(code);                    break;            }        }    };    private void modifyPassword() {        userPhone = registViewPhoneEdit.getText().toString();        newPassword = registViewAgainPasswordEdit.getText().toString();        newPasswordMD5 = MD5Utils.encode(newPassword);        modifyUrl = String.format(API.MODIFY_PASSWORD, userPhone, newPasswordMD5);        OkGo.get(modifyUrl)                .tag(this)                .execute(new StringDialogCallback(this) {                    @Override                    public void onSuccess(String s, Call call, Response response) {                        Log.e(TAG, "onSuccess: modify_result------------->" + s);                        ModifyResponse modifyResult = new Gson().fromJson(s, new TypeToken<ModifyResponse>() {                        }.getType());                        switch (modifyResult.getCode()) {                            case "-1":                                ZToastUtils.showShort(RegisterActivity.this, getString(R.string.modify_failure));                                break;                            case "0":                                ZToastUtils.showShort(RegisterActivity.this, getString(R.string.account_null));                                break;                            case "1":                                ZToastUtils.showShort(RegisterActivity.this, getString(R.string.modify_success));                                startActivity(new Intent(RegisterActivity.this, LoginActivity.class));                                onDestroy();                                break;                        }                    }                });    }    @OnTextChanged(value = R.id.regist_view_phone_edit, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)    void afterTextChanged(Editable s) {        if (CommonUtils.isMobileNO(registViewPhoneEdit.getText().toString().trim())) {            registViewVerificationCodeBtn.setClickable(true);            registViewVerificationCodeBtn.setBackgroundResource(R.drawable.button_bg2);        } else {            registViewVerificationCodeBtn.setClickable(false);            registViewVerificationCodeBtn.setBackgroundResource(R.drawable.shape_login_gray_button_layout);        }    }    @OnFocusChange(value = R.id.regist_view_verification_code_edit)    void onFocusChanged(View v, boolean hasFocus) {        if (!hasFocus) {            if (!TextUtils.equals(smsCode, registViewVerificationCodeEdit.getText().toString().trim())) {                registViewVerificationCodePrompt.setVisibility(View.VISIBLE);                return;            } else {                registViewVerificationCodePrompt.setVisibility(View.INVISIBLE);            }        }    }    @OnTextChanged(value = R.id.regist_view_again_password_edit, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)    void afterTextChanged1(Editable s) {        if (!TextUtils.isEmpty(registViewPhoneEdit.getText().toString().trim())                && !TextUtils.isEmpty(registViewPasswordEdit.getText().toString().trim())                && !TextUtils.isEmpty(registViewAgainPasswordEdit.getText().toString().trim())                && !TextUtils.isEmpty(registViewVerificationCodeEdit.getText().toString().trim())) {            registViewRegistBtn.setClickable(true);            registViewRegistBtn.setBackgroundResource(R.drawable.button_bg2);        } else {            registViewRegistBtn.setClickable(false);            registViewRegistBtn.setBackgroundResource(R.drawable.shape_login_gray_button_layout);        }    }    @OnClick({R.id.regist_view_verification_code_btn, R.id.regist_view_regist_btn})    public void onClick(View view) {        switch (view.getId()) {            case R.id.regist_view_verification_code_btn:                receiverMsg();                break;            case R.id.regist_view_regist_btn:                modifyPassword();                break;        }    }    /**     * 获取短信验证码     */    private void receiverMsg() {        if (!CommonUtils.isNetWorkConnected(this)) {            ZToastUtils.showShort(this, R.string.network_anomalies);            return;        }        smsCode = CommonUtils.getRandomPSMSValidateCode();        String content = String.format(getString(R.string.sms_content), smsCode);        Log.e("Register-152", "code----------------->" + content);        try {            smsURL = String.format(API.URL_SMS,                    registViewPhoneEdit.getText().toString().trim(),                    URLEncoder.encode(content, "gbk"));        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        if (smsURL != null) {            OkGo.get(smsURL)                    .tag(this)                    .execute(new StringDialogCallback(this) {                        @Override                        public void onSuccess(String s, Call call, Response response) {                            Log.e(TAG, "onSuccess: SMS_result------------->" + s);                            receiveSMS(s);                        }                    });        }    }    /**     * 解析短信验证码请求结果     *     * @param result 字符串     */    private void receiveSMS(String result) {        Log.e("One-163", "result------------>" + result);        if (TextUtils.equals(result, "100")) {            registViewVerificationCodeBtn.setClickable(false);            ZToastUtils.showShort(this, R.string.msg_success);            ValueAnimator valueAnimator = ValueAnimator.ofInt(60, 0);            valueAnimator.setDuration(60 * 1000);            valueAnimator.setInterpolator(new LinearInterpolator());            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                @Override                public void onAnimationUpdate(ValueAnimator animation) {                    registViewVerificationCodeBtn.setBackgroundResource(R.drawable.shape_login_gray_button_layout);                    registViewVerificationCodeBtn.setText(String.format(getString(R.string.re_get_sms), animation.getAnimatedValue()));                }            });            valueAnimator.addListener(new Animator.AnimatorListener() {                @Override                public void onAnimationStart(Animator animation) {                }                @Override                public void onAnimationEnd(Animator animation) {                    registViewVerificationCodeBtn.setText(R.string.get_sms);                    registViewVerificationCodeBtn.setClickable(true);                    registViewVerificationCodeBtn.setBackgroundResource(R.drawable.button_bg2);                }                @Override                public void onAnimationCancel(Animator animation) {                }                @Override                public void onAnimationRepeat(Animator animation) {                }            });            valueAnimator.start();        } else {            ZToastUtils.showShort(this, R.string.error_get_data);            registViewVerificationCodeBtn.setClickable(true);        }    }}