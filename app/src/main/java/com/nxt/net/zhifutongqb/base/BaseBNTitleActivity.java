package com.nxt.net.zhifutongqb.base;import android.Manifest;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.Toast;import com.baidu.navisdk.adapter.BNCommonSettingParam;import com.baidu.navisdk.adapter.BNOuterLogUtil;import com.baidu.navisdk.adapter.BNOuterTTSPlayerCallback;import com.baidu.navisdk.adapter.BNRoutePlanNode;import com.baidu.navisdk.adapter.BNaviSettingManager;import com.baidu.navisdk.adapter.BaiduNaviManager;import com.baidu.navisdk.adapter.BaiduNaviManager.NaviInitListener;import com.baidu.navisdk.adapter.BaiduNaviManager.RoutePlanListener;import com.baidu.navisdk.adapter.BaiduNaviManager.NavEventListener;import com.google.gson.Gson;import com.jaeger.library.StatusBarUtil;import com.nxt.net.zhifutongqb.R;import com.nxt.net.zhifutongqb.ui.activity.BNDemoGuideActivity;import com.nxt.net.zhifutongqb.widget.ZTitleBar;import com.nxt.net.zhifutongqb.app.MyApplication;import com.nxt.net.zhifutongqb.ui.activity.BNEventHandler;import com.nxt.net.zhifutongqb.utils.CommonUtils;import com.nxt.net.zhifutongqb.utils.ZToastUtils;import com.nxt.net.zhifutongqb.widget.LoadingDialog;import java.io.File;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import butterknife.ButterKnife;import butterknife.Unbinder;/** * Created by Maven on 2017/2/28. * Email: cyjiang_11@163.com * Description: */public abstract class BaseBNTitleActivity extends AppCompatActivity {    private static final String TAG = "BaseBNTitleActivity";    protected ZTitleBar zTitleBar;    protected View contentview;    protected LoadingDialog loadingDialog;    protected MyApplication application;    protected Unbinder unbinder;    protected boolean isnetconnected;    protected Context mContext;    public static List<Activity> activityList = new LinkedList<Activity>();    private static final String APP_FOLDER_NAME = "ZhiFuTongXC";    private Button mDb06ll = null;    private String mSDCardPath = null;    public static final String ROUTE_PLAN_NODE = "routePlanNode";    public static final String SHOW_CUSTOM_ITEM = "showCustomItem";    public static final String RESET_END_NODE = "resetEndNode";    public static final String VOID_MODE = "voidMode";    private final static String authBaseArr[] =            {Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.ACCESS_FINE_LOCATION};    private final static String authComArr[] = {Manifest.permission.READ_PHONE_STATE};    private final static int authBaseRequestCode = 1;    private final static int authComRequestCode = 2;    private boolean hasInitSuccess = false;    private boolean hasRequestComAuth = false;    BNRoutePlanNode sNode = null;    BNRoutePlanNode eNode = null;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        // TODO Auto-generated method stub        super.onCreate(savedInstanceState);        activityList.add(this);        mContext = getActivityContext();        setContentView(getLayout());        Handler h = new Handler();        h.postDelayed(new Runnable() {            @Override            public void run() {                String name = Thread.currentThread().getName();                Log.i("crug", name);                delayTest();            }        }, 500);        BNOuterLogUtil.setLogSwitcher(true);        if (initDirs()) {            initNavi();        }        // BNOuterLogUtil.setLogSwitcher(true);        MyApplication.getInstance().addActivity(this);        unbinder = ButterKnife.bind(this);        isnetconnected = CommonUtils.isNetWorkConnected(this);        //获取当前实例的类名        Log.d(TAG, "setContentView------------->" + getClass().getSimpleName());        application = MyApplication.getInstance();        setStatusBar();        initView();    }    private void setStatusBar() {        StatusBarUtil.setTranslucentForImageViewInFragment(this, null);    }    /**     * 初始化控件     */    protected abstract void initView();    /**     * 初始化界面     */    protected abstract int getLayout();    protected void showDialog() {        loadingDialog = new LoadingDialog(this, getString(R.string.is_loading));        loadingDialog.show();    }    protected void dismissDialog() {        if (loadingDialog != null && loadingDialog.isShowing()) {            new Thread(new Runnable() {                @Override                public void run() {                    long startTime = System.currentTimeMillis();                    while (System.currentTimeMillis() - startTime < 500) {                        try {                            Thread.sleep(100);                        } catch (InterruptedException e) {                            loadingDialog.dismiss();                        }                    }                    loadingDialog.dismiss();                }            }).start();        }    }    @Override    protected void onResume() {        super.onResume();    }    /**     * Activity.this     */    protected abstract Context getActivityContext();    //转json    public static String beanToJSONString(Object bean) {        return new Gson().toJson(bean);    }    public void delayTest() {        // SDKInitializer.initialize(BaseBNTitleActivity.this.getApplication());//        new Thread(new Runnable() {////            @Override//            public void run() {//                Looper.prepare();//                SDKInitializer.initialize(BaseBNTitleActivity.this.getApplication());//            }//        }).start();    }    public void CoordinateWGS84(BNRoutePlanNode sNode, BNRoutePlanNode eNode) {        if (BaiduNaviManager.isNaviInited()) {            routeplanToNavi(sNode, eNode);        }    }    public void CoordinateGCJ02(BNRoutePlanNode sNode, BNRoutePlanNode eNode) {        if (BaiduNaviManager.isNaviInited()) {            routeplanToNavi(sNode, eNode);        }    }    public void CoordinateBD09_MC(BNRoutePlanNode sNode, BNRoutePlanNode eNode) {        if (BaiduNaviManager.isNaviInited()) {            routeplanToNavi(sNode, eNode);        }    }    public void CoordinateBD09LL(BNRoutePlanNode sNode, BNRoutePlanNode eNode) {        if (BaiduNaviManager.isNaviInited()) {            routeplanToNavi(sNode, eNode);        }    }    private boolean initDirs() {        mSDCardPath = getSdcardDir();        if (mSDCardPath == null) {            return false;        }        File f = new File(mSDCardPath, APP_FOLDER_NAME);        if (!f.exists()) {            try {                f.mkdir();            } catch (Exception e) {                e.printStackTrace();                return false;            }        }        return true;    }    String authinfo = null;    /**     * 内部TTS播报状态回传handler     */    private Handler ttsHandler = new Handler() {        public void handleMessage(Message msg) {            int type = msg.what;            switch (type) {                case BaiduNaviManager.TTSPlayMsgType.PLAY_START_MSG: {                    // showToastMsg("Handler : TTS play start");                    break;                }                case BaiduNaviManager.TTSPlayMsgType.PLAY_END_MSG: {                    // showToastMsg("Handler : TTS play end");                    break;                }                default:                    break;            }        }    };    /**     * 内部TTS播报状态回调接口     */    private BaiduNaviManager.TTSPlayStateListener ttsPlayStateListener = new BaiduNaviManager.TTSPlayStateListener() {        @Override        public void playEnd() {            showToastMsg("TTSPlayStateListener : TTS play end");        }        @Override        public void playStart() {            showToastMsg("TTSPlayStateListener : TTS play start");        }    };    public void showToastMsg(final String msg) {        this.runOnUiThread(new Runnable() {            @Override            public void run() {                Toast.makeText(mContext, msg, Toast.LENGTH_SHORT).show();            }        });    }    private boolean hasBasePhoneAuth() {        // TODO Auto-generated method stub        PackageManager pm = this.getPackageManager();        for (String auth : authBaseArr) {            if (pm.checkPermission(auth, this.getPackageName()) != PackageManager.PERMISSION_GRANTED) {                return false;            }        }        return true;    }    private boolean hasCompletePhoneAuth() {        // TODO Auto-generated method stub        PackageManager pm = this.getPackageManager();        for (String auth : authComArr) {            if (pm.checkPermission(auth, this.getPackageName()) != PackageManager.PERMISSION_GRANTED) {                return false;            }        }        return true;    }    private void initNavi() {        BNOuterTTSPlayerCallback ttsCallback = null;        // 申请权限        if (android.os.Build.VERSION.SDK_INT >= 23) {            if (!hasBasePhoneAuth()) {                this.requestPermissions(authBaseArr, authBaseRequestCode);                return;            }        }        BaiduNaviManager.getInstance().init(this, mSDCardPath, APP_FOLDER_NAME, new NaviInitListener() {            @Override            public void onAuthResult(int status, String msg) {                if (0 == status) {                    authinfo = "key校验成功!";                } else {                    authinfo = "key校验失败, " + msg;                }                runOnUiThread(new Runnable() {                    @Override                    public void run() {//                        Toast.makeText(mContext, authinfo, Toast.LENGTH_LONG).show();                        Log.i(TAG, "run: authinfo------------>" + authinfo);                    }                });            }            public void initSuccess() {                Log.e(TAG, "initSuccess: 百度导航引擎初始化成功");                hasInitSuccess = true;                initSetting();            }            public void initStart() {                Log.e(TAG, "initStart: 百度导航引擎初始化开始");            }            public void initFailed() {                Log.e(TAG, "initFailed: 百度导航引擎初始化失败");            }        }, null, ttsHandler, ttsPlayStateListener);    }    private String getSdcardDir() {        if (Environment.getExternalStorageState().equalsIgnoreCase(Environment.MEDIA_MOUNTED)) {            return Environment.getExternalStorageDirectory().toString();        }        return null;    }    private BNRoutePlanNode.CoordinateType mCoordinateType = null;    private void routeplanToNavi(BNRoutePlanNode sNode, BNRoutePlanNode eNode) {        if (!hasInitSuccess) {            Log.e(TAG, "routeplanToNavi:还未初始化! ");        }        // 权限申请        if (android.os.Build.VERSION.SDK_INT >= 23) {            // 保证导航功能完备            if (!hasCompletePhoneAuth()) {                if (!hasRequestComAuth) {                    hasRequestComAuth = true;                    this.requestPermissions(authComArr, authComRequestCode);                    return;                } else {                    Toast.makeText(mContext, "没有完备的权限!", Toast.LENGTH_SHORT).show();                }            }        }        if (sNode != null && eNode != null) {            List<BNRoutePlanNode> list = new ArrayList<BNRoutePlanNode>();            list.add(sNode);            list.add(eNode);            // 开发者可以使用旧的算路接口，也可以使用新的算路接口,可以接收诱导信息等            // BaiduNaviManager.getInstance().launchNavigator(this, list, 1, true, new DemoRoutePlanListener(sNode));            //模拟导航//            BaiduNaviManager.getInstance().launchNavigator(this, list, 1, false, new DemoRoutePlanListener(sNode),//                    eventListerner);            //导航            BaiduNaviManager.getInstance().launchNavigator(this, list, 1, true, new DemoRoutePlanListener(sNode),                    eventListerner);        }    }    NavEventListener eventListerner = new BaiduNaviManager.NavEventListener() {        @Override        public void onCommonEventCall(int what, int arg1, int arg2, Bundle bundle) {            BNEventHandler.getInstance().handleNaviEvent(what, arg1, arg2, bundle);        }    };    public class DemoRoutePlanListener implements RoutePlanListener {        private BNRoutePlanNode mBNRoutePlanNode = null;        public DemoRoutePlanListener(BNRoutePlanNode node) {            mBNRoutePlanNode = node;        }        @Override        public void onJumpToNavigator() {            /*             * 设置途径点以及resetEndNode会回调该接口             */            for (Activity ac : activityList) {                if (ac.getClass().getName().endsWith("BNDemoGuideActivity")) {                    return;                }            }            Intent intent = new Intent(mContext, BNDemoGuideActivity.class);            Bundle bundle = new Bundle();            bundle.putSerializable(ROUTE_PLAN_NODE, (BNRoutePlanNode) mBNRoutePlanNode);            intent.putExtras(bundle);            startActivity(intent);        }        @Override        public void onRoutePlanFailed() {            // TODO Auto-generated method stub            ZToastUtils.showShort(BaseBNTitleActivity.this,"算路失败，请联系管理员");            Log.e(TAG, "onRoutePlanFailed: 算路失败!");        }    }    private void initSetting() {        // BNaviSettingManager.setDayNightMode(BNaviSettingManager.DayNightMode.DAY_NIGHT_MODE_DAY);        BNaviSettingManager                .setShowTotalRoadConditionBar(BNaviSettingManager.PreViewRoadCondition.ROAD_CONDITION_BAR_SHOW_ON);        BNaviSettingManager.setVoiceMode(BNaviSettingManager.VoiceMode.Veteran);        // BNaviSettingManager.setPowerSaveMode(BNaviSettingManager.PowerSaveMode.DISABLE_MODE);        BNaviSettingManager.setRealRoadCondition(BNaviSettingManager.RealRoadCondition.NAVI_ITS_ON);        BNaviSettingManager.setIsAutoQuitWhenArrived(true);        Bundle bundle = new Bundle();        // 必须设置APPID，否则会静音        bundle.putString(BNCommonSettingParam.TTS_APP_ID, "9688901");        BNaviSettingManager.setNaviSdkParam(bundle);    }    private BNOuterTTSPlayerCallback mTTSCallback = new BNOuterTTSPlayerCallback() {        @Override        public void stopTTS() {            // TODO Auto-generated method stub            Log.e("test_TTS", "stopTTS");        }        @Override        public void resumeTTS() {            // TODO Auto-generated method stub            Log.e("test_TTS", "resumeTTS");        }        @Override        public void releaseTTSPlayer() {            // TODO Auto-generated method stub            Log.e("test_TTS", "releaseTTSPlayer");        }        @Override        public int playTTSText(String speech, int bPreempt) {            // TODO Auto-generated method stub            Log.e("test_TTS", "playTTSText" + "_" + speech + "_" + bPreempt);            return 1;        }        @Override        public void phoneHangUp() {            // TODO Auto-generated method stub            Log.e("test_TTS", "phoneHangUp");        }        @Override        public void phoneCalling() {            // TODO Auto-generated method stub            Log.e("test_TTS", "phoneCalling");        }        @Override        public void pauseTTS() {            // TODO Auto-generated method stub            Log.e("test_TTS", "pauseTTS");        }        @Override        public void initTTSPlayer() {            // TODO Auto-generated method stub            Log.e("test_TTS", "initTTSPlayer");        }        @Override        public int getTTSState() {            // TODO Auto-generated method stub            Log.e("test_TTS", "getTTSState");            return 1;        }    };    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        // TODO Auto-generated method stub        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == authBaseRequestCode) {            for (int ret : grantResults) {                if (ret == 0) {                    continue;                } else {                    Toast.makeText(mContext, "缺少导航基本的权限!", Toast.LENGTH_SHORT).show();                    return;                }            }            initNavi();        } else if (requestCode == authComRequestCode) {            for (int ret : grantResults) {                if (ret == 0) {                    continue;                }            }            routeplanToNavi(sNode, eNode);        }    }    /**     * Topbar左侧按钮单击事件     */    public void onLeftClick(View view) {        finish();    }    /**     * Topbar右侧按钮单击事件     */    public void onRightClick(View view) {    }}